{"ast":null,"code":"import * as React from 'react';\nimport { useGridApiMethod, useGridNativeEventListener } from '../../utils';\nfunction writeToClipboardPolyfill(data) {\n  const span = document.createElement('span');\n  span.style.whiteSpace = 'pre';\n  span.style.userSelect = 'all';\n  span.style.opacity = '0px';\n  span.textContent = data;\n  document.body.appendChild(span);\n  const range = document.createRange();\n  range.selectNode(span);\n  const selection = window.getSelection();\n  selection.removeAllRanges();\n  selection.addRange(range);\n  try {\n    document.execCommand('copy');\n  } finally {\n    document.body.removeChild(span);\n  }\n}\nfunction hasNativeSelection(element) {\n  var _window$getSelection;\n  // When getSelection is called on an <iframe> that is not displayed Firefox will return null.\n  if ((_window$getSelection = window.getSelection()) != null && _window$getSelection.toString()) {\n    return true;\n  }\n\n  // window.getSelection() returns an empty string in Firefox for selections inside a form element.\n  // See: https://bugzilla.mozilla.org/show_bug.cgi?id=85686.\n  // Instead, we can use element.selectionStart that is only defined on form elements.\n  if (element && (element.selectionEnd || 0) - (element.selectionStart || 0) > 0) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * @requires useGridCsvExport (method)\n * @requires useGridSelection (method)\n */\nexport const useGridClipboard = apiRef => {\n  const copySelectedRowsToClipboard = React.useCallback(() => {\n    if (apiRef.current.getSelectedRows().size === 0) {\n      return;\n    }\n    const data = apiRef.current.getDataAsCsv({\n      includeHeaders: false,\n      delimiter: '\\t'\n    });\n    if (navigator.clipboard) {\n      navigator.clipboard.writeText(data).catch(() => {\n        writeToClipboardPolyfill(data);\n      });\n    } else {\n      writeToClipboardPolyfill(data);\n    }\n  }, [apiRef]);\n  const handleKeydown = React.useCallback(event => {\n    const isModifierKeyPressed = event.ctrlKey || event.metaKey;\n    // event.code === 'KeyC' is not enough as event.code assume a QWERTY keyboard layout which would\n    // be wrong with a Dvorak keyboard (as if pressing J).\n    if (String.fromCharCode(event.keyCode) !== 'C' || !isModifierKeyPressed) {\n      return;\n    }\n\n    // Do nothing if there's a native selection\n    if (hasNativeSelection(event.target)) {\n      return;\n    }\n    apiRef.current.unstable_copySelectedRowsToClipboard();\n  }, [apiRef]);\n  useGridNativeEventListener(apiRef, apiRef.current.rootElementRef, 'keydown', handleKeydown);\n  const clipboardApi = {\n    unstable_copySelectedRowsToClipboard: copySelectedRowsToClipboard\n  };\n  useGridApiMethod(apiRef, clipboardApi, 'public');\n};","map":{"version":3,"names":["React","useGridApiMethod","useGridNativeEventListener","writeToClipboardPolyfill","data","span","document","createElement","style","whiteSpace","userSelect","opacity","textContent","body","appendChild","range","createRange","selectNode","selection","window","getSelection","removeAllRanges","addRange","execCommand","removeChild","hasNativeSelection","element","_window$getSelection","toString","selectionEnd","selectionStart","useGridClipboard","apiRef","copySelectedRowsToClipboard","useCallback","current","getSelectedRows","size","getDataAsCsv","includeHeaders","delimiter","navigator","clipboard","writeText","catch","handleKeydown","event","isModifierKeyPressed","ctrlKey","metaKey","String","fromCharCode","keyCode","target","unstable_copySelectedRowsToClipboard","rootElementRef","clipboardApi"],"sources":["/Users/oscar.garzon/Documents/breakable_toy_chidisimo/front-end/node_modules/@mui/x-data-grid/hooks/features/clipboard/useGridClipboard.js"],"sourcesContent":["import * as React from 'react';\nimport { useGridApiMethod, useGridNativeEventListener } from '../../utils';\nfunction writeToClipboardPolyfill(data) {\n  const span = document.createElement('span');\n  span.style.whiteSpace = 'pre';\n  span.style.userSelect = 'all';\n  span.style.opacity = '0px';\n  span.textContent = data;\n  document.body.appendChild(span);\n  const range = document.createRange();\n  range.selectNode(span);\n  const selection = window.getSelection();\n  selection.removeAllRanges();\n  selection.addRange(range);\n  try {\n    document.execCommand('copy');\n  } finally {\n    document.body.removeChild(span);\n  }\n}\nfunction hasNativeSelection(element) {\n  var _window$getSelection;\n  // When getSelection is called on an <iframe> that is not displayed Firefox will return null.\n  if ((_window$getSelection = window.getSelection()) != null && _window$getSelection.toString()) {\n    return true;\n  }\n\n  // window.getSelection() returns an empty string in Firefox for selections inside a form element.\n  // See: https://bugzilla.mozilla.org/show_bug.cgi?id=85686.\n  // Instead, we can use element.selectionStart that is only defined on form elements.\n  if (element && (element.selectionEnd || 0) - (element.selectionStart || 0) > 0) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * @requires useGridCsvExport (method)\n * @requires useGridSelection (method)\n */\nexport const useGridClipboard = apiRef => {\n  const copySelectedRowsToClipboard = React.useCallback(() => {\n    if (apiRef.current.getSelectedRows().size === 0) {\n      return;\n    }\n    const data = apiRef.current.getDataAsCsv({\n      includeHeaders: false,\n      delimiter: '\\t'\n    });\n    if (navigator.clipboard) {\n      navigator.clipboard.writeText(data).catch(() => {\n        writeToClipboardPolyfill(data);\n      });\n    } else {\n      writeToClipboardPolyfill(data);\n    }\n  }, [apiRef]);\n  const handleKeydown = React.useCallback(event => {\n    const isModifierKeyPressed = event.ctrlKey || event.metaKey;\n    // event.code === 'KeyC' is not enough as event.code assume a QWERTY keyboard layout which would\n    // be wrong with a Dvorak keyboard (as if pressing J).\n    if (String.fromCharCode(event.keyCode) !== 'C' || !isModifierKeyPressed) {\n      return;\n    }\n\n    // Do nothing if there's a native selection\n    if (hasNativeSelection(event.target)) {\n      return;\n    }\n    apiRef.current.unstable_copySelectedRowsToClipboard();\n  }, [apiRef]);\n  useGridNativeEventListener(apiRef, apiRef.current.rootElementRef, 'keydown', handleKeydown);\n  const clipboardApi = {\n    unstable_copySelectedRowsToClipboard: copySelectedRowsToClipboard\n  };\n  useGridApiMethod(apiRef, clipboardApi, 'public');\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}