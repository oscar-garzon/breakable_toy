{"ast":null,"code":"var _jsxFileName = \"/Users/oscar.garzon/Documents/breakable_toy_chidisimo/front-end/src/components/ToDolist.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { SERVER_URL } from '../constants.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ToDolist() {\n  _s();\n  const [todos, setTodos] = useState([]);\n  const columns = [{\n    field: 'text',\n    headerName: 'Text',\n    width: 200\n  }, {\n    field: 'priority',\n    headerName: 'Priority',\n    width: 200\n  }, {\n    field: 'due_date',\n    headerName: 'Due Date',\n    width: 200\n  }, {\n    field: '_links.self.href',\n    headerName: '',\n    sortable: false,\n    filterable: false,\n    renderCell: row => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => onDelClick(row.id),\n      children: \"Delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 15\n    }, this)\n  }];\n  useEffect(() => {\n    fetchToDos();\n  }, []);\n  const fetchToDos = () => {\n    fetch(SERVER_URL + 'todos').then(response => response.json()).then(data => setTodos(data._embedded.toDoList)).catch(err => console.error(err));\n  };\n  const onDelClick = url => {\n    fetch(url, {\n      method: 'DELETE'\n    }).then(response => fetchToDos()).catch(err => console.error(err));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: 500,\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: todos,\n      columns: columns,\n      disableSelectionOnClick: true,\n      getRowId: row => row._links.self.href\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n_s(ToDolist, \"4w2FR3x+JAhc2MKl4V8naiLXs70=\");\n_c = ToDolist;\nexport default ToDolist;\nvar _c;\n$RefreshReg$(_c, \"ToDolist\");","map":{"version":3,"names":["React","useEffect","useState","DataGrid","SERVER_URL","jsxDEV","_jsxDEV","ToDolist","_s","todos","setTodos","columns","field","headerName","width","sortable","filterable","renderCell","row","onClick","onDelClick","id","children","fileName","_jsxFileName","lineNumber","columnNumber","fetchToDos","fetch","then","response","json","data","_embedded","toDoList","catch","err","console","error","url","method","style","height","rows","disableSelectionOnClick","getRowId","_links","self","href","_c","$RefreshReg$"],"sources":["/Users/oscar.garzon/Documents/breakable_toy_chidisimo/front-end/src/components/ToDolist.js"],"sourcesContent":["import React, { useEffect, useState} from 'react';\nimport { DataGrid } from '@mui/x-data-grid';\n\nimport { SERVER_URL } from '../constants.js'\n\nfunction ToDolist() {\n    const [todos, setTodos] = useState([]);\n    const columns = [\n        {field: 'text', headerName: 'Text', width: 200},\n        {field: 'priority', headerName: 'Priority', width: 200},\n        {field: 'due_date', headerName: 'Due Date', width: 200},\n        {\n            field: '_links.self.href',\n            headerName: '',\n            sortable: false,\n            filterable: false,\n            renderCell: row =>\n              <button\n                 onClick={() => onDelClick(row.id)}>Delete\n              </button>\n        }\n    ];\n    useEffect(() => {\n        fetchToDos();\n    }, []);       \n      \n    const fetchToDos = () => {\n    fetch(SERVER_URL + 'todos')\n    .then(response => response.json())\n    .then(data => setTodos(data._embedded.toDoList))\n    .catch(err => console.error(err));    \n    }\n\n    const onDelClick = (url) => {\n        fetch(url,  {method:  'DELETE'})\n        .then(response => fetchToDos())\n        .catch(err => console.error(err))\n      }\n\n    return(\n        <div style={{ height: 500, width: '100%' }}>\n            <DataGrid\n                rows={todos}\n                columns={columns}\n                disableSelectionOnClick={true}\n                getRowId={row => row._links.self.href}/>\n        </div>\n    );\n}\nexport default ToDolist;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AACjD,SAASC,QAAQ,QAAQ,kBAAkB;AAE3C,SAASC,UAAU,QAAQ,iBAAiB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMS,OAAO,GAAG,CACZ;IAACC,KAAK,EAAE,MAAM;IAAEC,UAAU,EAAE,MAAM;IAAEC,KAAK,EAAE;EAAG,CAAC,EAC/C;IAACF,KAAK,EAAE,UAAU;IAAEC,UAAU,EAAE,UAAU;IAAEC,KAAK,EAAE;EAAG,CAAC,EACvD;IAACF,KAAK,EAAE,UAAU;IAAEC,UAAU,EAAE,UAAU;IAAEC,KAAK,EAAE;EAAG,CAAC,EACvD;IACIF,KAAK,EAAE,kBAAkB;IACzBC,UAAU,EAAE,EAAE;IACdE,QAAQ,EAAE,KAAK;IACfC,UAAU,EAAE,KAAK;IACjBC,UAAU,EAAEC,GAAG,iBACbZ,OAAA;MACGa,OAAO,EAAEA,CAAA,KAAMC,UAAU,CAACF,GAAG,CAACG,EAAE,CAAE;MAAAC,QAAA,EAAC;IACtC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACN,CAAC,CACJ;EACDzB,SAAS,CAAC,MAAM;IACZ0B,UAAU,EAAE;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,UAAU,GAAGA,CAAA,KAAM;IACzBC,KAAK,CAACxB,UAAU,GAAG,OAAO,CAAC,CAC1ByB,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAItB,QAAQ,CAACsB,IAAI,CAACC,SAAS,CAACC,QAAQ,CAAC,CAAC,CAC/CC,KAAK,CAACC,GAAG,IAAIC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC,CAAC;EACjC,CAAC;EAED,MAAMhB,UAAU,GAAImB,GAAG,IAAK;IACxBX,KAAK,CAACW,GAAG,EAAG;MAACC,MAAM,EAAG;IAAQ,CAAC,CAAC,CAC/BX,IAAI,CAACC,QAAQ,IAAIH,UAAU,EAAE,CAAC,CAC9BQ,KAAK,CAACC,GAAG,IAAIC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC,CAAC;EACnC,CAAC;EAEH,oBACI9B,OAAA;IAAKmC,KAAK,EAAE;MAAEC,MAAM,EAAE,GAAG;MAAE5B,KAAK,EAAE;IAAO,CAAE;IAAAQ,QAAA,eACvChB,OAAA,CAACH,QAAQ;MACLwC,IAAI,EAAElC,KAAM;MACZE,OAAO,EAAEA,OAAQ;MACjBiC,uBAAuB,EAAE,IAAK;MAC9BC,QAAQ,EAAE3B,GAAG,IAAIA,GAAG,CAAC4B,MAAM,CAACC,IAAI,CAACC;IAAK;MAAAzB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAE;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC1C;AAEd;AAAClB,EAAA,CA3CQD,QAAQ;AAAA0C,EAAA,GAAR1C,QAAQ;AA4CjB,eAAeA,QAAQ;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}