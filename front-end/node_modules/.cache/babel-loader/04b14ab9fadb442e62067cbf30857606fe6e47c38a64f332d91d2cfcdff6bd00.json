{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridFilterableColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { GridPreferencePanelsValue } from '../preferencesPanel/gridPreferencePanelsValue';\nimport { getDefaultGridFilterModel } from './gridFilterState';\nimport { gridFilterModelSelector } from './gridFilterSelector';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { GRID_ROOT_GROUP_ID, gridRowTreeSelector } from '../rows';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\nimport { buildAggregatedFilterApplier, sanitizeFilterModel, mergeStateWithFilterModel, cleanFilterItem, passFilterLogic } from './gridFilterUtils';\nimport { isDeepEqual } from '../../../utils/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const filterStateInitializer = (state, props, apiRef) => {\n  var _ref, _props$filterModel, _props$initialState, _props$initialState$f;\n  const filterModel = (_ref = (_props$filterModel = props.filterModel) != null ? _props$filterModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$f = _props$initialState.filter) == null ? void 0 : _props$initialState$f.filterModel) != null ? _ref : getDefaultGridFilterModel();\n  return _extends({}, state, {\n    filter: {\n      filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef),\n      visibleRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    }\n  });\n};\n\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n * @requires useGridRows (event)\n */\nexport const useGridFilter = (apiRef, props) => {\n  var _props$initialState3, _props$initialState3$, _props$slotProps2;\n  const logger = useGridLogger(apiRef, 'useGridFilter');\n  apiRef.current.registerControlState({\n    stateId: 'filter',\n    propModel: props.filterModel,\n    propOnChange: props.onFilterModelChange,\n    stateSelector: gridFilterModelSelector,\n    changeEvent: 'filterModelChange'\n  });\n  const updateFilteredRows = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const filterModel = gridFilterModelSelector(state, apiRef.current.instanceId);\n      const isRowMatchingFilters = props.filterMode === 'client' ? buildAggregatedFilterApplier(filterModel, apiRef) : null;\n      const filteringResult = apiRef.current.applyStrategyProcessor('filtering', {\n        isRowMatchingFilters,\n        filterModel: filterModel != null ? filterModel : getDefaultGridFilterModel()\n      });\n      return _extends({}, state, {\n        filter: _extends({}, state.filter, filteringResult)\n      });\n    });\n    apiRef.current.publishEvent('filteredRowsSet');\n  }, [props.filterMode, apiRef]);\n  const addColumnMenuItem = React.useCallback((columnMenuItems, colDef) => {\n    if (colDef == null || colDef.filterable === false || props.disableColumnFilter) {\n      return columnMenuItems;\n    }\n    return [...columnMenuItems, 'ColumnMenuFilterItem'];\n  }, [props.disableColumnFilter]);\n\n  /**\n   * API METHODS\n   */\n  const applyFilters = React.useCallback(() => {\n    updateFilteredRows();\n    apiRef.current.forceUpdate();\n  }, [apiRef, updateFilteredRows]);\n  const upsertFilterItem = React.useCallback(item => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = [...filterModel.items];\n    const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n    if (itemIndex === -1) {\n      items.push(item);\n    } else {\n      items[itemIndex] = item;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItem');\n  }, [apiRef]);\n  const upsertFilterItems = React.useCallback(items => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const existingItems = [...filterModel.items];\n    items.forEach(item => {\n      const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n      if (itemIndex === -1) {\n        existingItems.push(item);\n      } else {\n        existingItems[itemIndex] = item;\n      }\n    });\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItems');\n  }, [apiRef]);\n  const deleteFilterItem = React.useCallback(itemToDelete => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = filterModel.items.filter(item => item.id !== itemToDelete.id);\n    if (items.length === filterModel.items.length) {\n      return;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'deleteFilterItem');\n  }, [apiRef]);\n  const showFilterPanel = React.useCallback(targetColumnField => {\n    logger.debug('Displaying filter panel');\n    if (targetColumnField) {\n      const filterModel = gridFilterModelSelector(apiRef);\n      const filterItemsWithValue = filterModel.items.filter(item => {\n        var _column$filterOperato;\n        if (item.value !== undefined) {\n          return true;\n        }\n        const column = apiRef.current.getColumn(item.field);\n        const filterOperator = (_column$filterOperato = column.filterOperators) == null ? void 0 : _column$filterOperato.find(operator => operator.value === item.operator);\n        const requiresFilterValue = typeof (filterOperator == null ? void 0 : filterOperator.requiresFilterValue) === 'undefined' ? true : filterOperator == null ? void 0 : filterOperator.requiresFilterValue;\n\n        // Operators like `isEmpty` don't have and don't require `item.value`.\n        // So we don't want to remove them from the filter model if `item.value === undefined`.\n        // See https://github.com/mui/mui-x/issues/5402\n        if (requiresFilterValue) {\n          return false;\n        }\n        return true;\n      });\n      let newFilterItems;\n      const filterItemOnTarget = filterItemsWithValue.find(item => item.field === targetColumnField);\n      const targetColumn = apiRef.current.getColumn(targetColumnField);\n      if (filterItemOnTarget) {\n        newFilterItems = filterItemsWithValue;\n      } else if (props.disableMultipleColumnsFiltering) {\n        newFilterItems = [cleanFilterItem({\n          field: targetColumnField,\n          operator: targetColumn.filterOperators[0].value\n        }, apiRef)];\n      } else {\n        newFilterItems = [...filterItemsWithValue, cleanFilterItem({\n          field: targetColumnField,\n          operator: targetColumn.filterOperators[0].value\n        }, apiRef)];\n      }\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n    apiRef.current.showPreferences(GridPreferencePanelsValue.filters);\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const hideFilterPanel = React.useCallback(() => {\n    logger.debug('Hiding filter panel');\n    apiRef.current.hidePreferences();\n  }, [apiRef, logger]);\n  const setFilterLogicOperator = React.useCallback(logicOperator => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    if (filterModel.logicOperator === logicOperator) {\n      return;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      logicOperator\n    }), 'changeLogicOperator');\n  }, [apiRef]);\n  const setQuickFilterValues = React.useCallback(values => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    if (isDeepEqual(filterModel.quickFilterValues, values)) {\n      return;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      quickFilterValues: [...values]\n    }));\n  }, [apiRef]);\n  const setFilterModel = React.useCallback((model, reason) => {\n    const currentModel = gridFilterModelSelector(apiRef);\n    if (currentModel !== model) {\n      logger.debug('Setting filter model');\n      apiRef.current.updateControlState('filter', mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef), reason);\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const filterApi = {\n    setFilterLogicOperator,\n    unstable_applyFilters: applyFilters,\n    deleteFilterItem,\n    upsertFilterItem,\n    upsertFilterItems,\n    setFilterModel,\n    showFilterPanel,\n    hideFilterPanel,\n    setQuickFilterValues\n  };\n  useGridApiMethod(apiRef, filterApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState2, _props$initialState2$;\n    const filterModelToExport = gridFilterModelSelector(apiRef);\n    const shouldExportFilterModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the model is controlled\n    props.filterModel != null ||\n    // Always export if the model has been initialized\n    ((_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.filter) == null ? void 0 : _props$initialState2$.filterModel) != null ||\n    // Export if the model is not equal to the default value\n    !isDeepEqual(filterModelToExport, getDefaultGridFilterModel());\n    if (!shouldExportFilterModel) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      filter: {\n        filterModel: filterModelToExport\n      }\n    });\n  }, [apiRef, props.filterModel, (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.filter) == null ? void 0 : _props$initialState3$.filterModel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n    const filterModel = (_context$stateToResto = context.stateToRestore.filter) == null ? void 0 : _context$stateToResto.filterModel;\n    if (filterModel == null) {\n      return params;\n    }\n    apiRef.current.updateControlState('filter', mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef), 'restoreState');\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.unstable_applyFilters]\n    });\n  }, [apiRef, props.disableMultipleColumnsFiltering]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.filters) {\n      var _props$slotProps;\n      const FilterPanel = props.slots.filterPanel;\n      return /*#__PURE__*/_jsx(FilterPanel, _extends({}, (_props$slotProps = props.slotProps) == null ? void 0 : _props$slotProps.filterPanel));\n    }\n    return initialValue;\n  }, [props.slots.filterPanel, (_props$slotProps2 = props.slotProps) == null ? void 0 : _props$slotProps2.filterPanel]);\n  const flatFilteringMethod = React.useCallback(params => {\n    if (props.filterMode === 'client' && params.isRowMatchingFilters) {\n      const tree = gridRowTreeSelector(apiRef);\n      const rowIds = tree[GRID_ROOT_GROUP_ID].children;\n      const filteredRowsLookup = {};\n      for (let i = 0; i < rowIds.length; i += 1) {\n        const rowId = rowIds[i];\n        let isRowPassing;\n        if (typeof rowId === 'string' && rowId.startsWith('auto-generated-group-footer')) {\n          isRowPassing = true;\n        } else {\n          const {\n            passingFilterItems,\n            passingQuickFilterValues\n          } = params.isRowMatchingFilters(rowId);\n          isRowPassing = passFilterLogic([passingFilterItems], [passingQuickFilterValues], params.filterModel, apiRef);\n        }\n        filteredRowsLookup[rowId] = isRowPassing;\n      }\n      return {\n        filteredRowsLookup,\n        // For flat tree, the `visibleRowsLookup` and the `filteredRowsLookup` are equals since no row is collapsed.\n        visibleRowsLookup: filteredRowsLookup,\n        filteredDescendantCountLookup: {}\n      };\n    }\n    return {\n      visibleRowsLookup: {},\n      filteredRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    };\n  }, [apiRef, props.filterMode]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuItem);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'filtering', flatFilteringMethod);\n\n  /**\n   * EVENTS\n   */\n  const handleColumnsChange = React.useCallback(() => {\n    logger.debug('onColUpdated - GridColumns changed, applying filters');\n    const filterModel = gridFilterModelSelector(apiRef);\n    const filterableColumnsLookup = gridFilterableColumnLookupSelector(apiRef);\n    const newFilterItems = filterModel.items.filter(item => item.field && filterableColumnsLookup[item.field]);\n    if (newFilterItems.length < filterModel.items.length) {\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n  }, [apiRef, logger]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'filtering') {\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef]);\n\n  // Do not call `apiRef.current.forceUpdate` to avoid re-render before updating the sorted rows.\n  // Otherwise, the state is not consistent during the render\n  useGridApiEventHandler(apiRef, 'rowsSet', updateFilteredRows);\n  useGridApiEventHandler(apiRef, 'rowExpansionChange', apiRef.current.unstable_applyFilters);\n  useGridApiEventHandler(apiRef, 'columnsChange', handleColumnsChange);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n\n  /**\n   * 1ST RENDER\n   */\n  useFirstRender(() => {\n    apiRef.current.unstable_applyFilters();\n  });\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    if (props.filterModel !== undefined) {\n      apiRef.current.setFilterModel(props.filterModel);\n    }\n  }, [apiRef, logger, props.filterModel]);\n};","map":{"version":3,"names":["_extends","React","useGridApiEventHandler","useGridApiMethod","useGridLogger","gridFilterableColumnLookupSelector","GridPreferencePanelsValue","getDefaultGridFilterModel","gridFilterModelSelector","useFirstRender","GRID_ROOT_GROUP_ID","gridRowTreeSelector","useGridRegisterPipeProcessor","GRID_DEFAULT_STRATEGY","useGridRegisterStrategyProcessor","buildAggregatedFilterApplier","sanitizeFilterModel","mergeStateWithFilterModel","cleanFilterItem","passFilterLogic","isDeepEqual","jsx","_jsx","filterStateInitializer","state","props","apiRef","_ref","_props$filterModel","_props$initialState","_props$initialState$f","filterModel","initialState","filter","disableMultipleColumnsFiltering","visibleRowsLookup","filteredDescendantCountLookup","useGridFilter","_props$initialState3","_props$initialState3$","_props$slotProps2","logger","current","registerControlState","stateId","propModel","propOnChange","onFilterModelChange","stateSelector","changeEvent","updateFilteredRows","useCallback","setState","instanceId","isRowMatchingFilters","filterMode","filteringResult","applyStrategyProcessor","publishEvent","addColumnMenuItem","columnMenuItems","colDef","filterable","disableColumnFilter","applyFilters","forceUpdate","upsertFilterItem","item","items","itemIndex","findIndex","filterItem","id","push","setFilterModel","upsertFilterItems","existingItems","forEach","deleteFilterItem","itemToDelete","length","showFilterPanel","targetColumnField","debug","filterItemsWithValue","_column$filterOperato","value","undefined","column","getColumn","field","filterOperator","filterOperators","find","operator","requiresFilterValue","newFilterItems","filterItemOnTarget","targetColumn","showPreferences","filters","hideFilterPanel","hidePreferences","setFilterLogicOperator","logicOperator","setQuickFilterValues","values","quickFilterValues","model","reason","currentModel","updateControlState","unstable_applyFilters","filterApi","stateExportPreProcessing","prevState","context","_props$initialState2","_props$initialState2$","filterModelToExport","shouldExportFilterModel","exportOnlyDirtyModels","stateRestorePreProcessing","params","_context$stateToResto","stateToRestore","callbacks","preferencePanelPreProcessing","initialValue","_props$slotProps","FilterPanel","slots","filterPanel","slotProps","flatFilteringMethod","tree","rowIds","children","filteredRowsLookup","i","rowId","isRowPassing","startsWith","passingFilterItems","passingQuickFilterValues","handleColumnsChange","filterableColumnsLookup","handleStrategyProcessorChange","methodName","useEffect"],"sources":["/Users/oscar.garzon/Documents/breakable_toy_chidisimo/front-end/node_modules/@mui/x-data-grid/hooks/features/filter/useGridFilter.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridFilterableColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { GridPreferencePanelsValue } from '../preferencesPanel/gridPreferencePanelsValue';\nimport { getDefaultGridFilterModel } from './gridFilterState';\nimport { gridFilterModelSelector } from './gridFilterSelector';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { GRID_ROOT_GROUP_ID, gridRowTreeSelector } from '../rows';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\nimport { buildAggregatedFilterApplier, sanitizeFilterModel, mergeStateWithFilterModel, cleanFilterItem, passFilterLogic } from './gridFilterUtils';\nimport { isDeepEqual } from '../../../utils/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const filterStateInitializer = (state, props, apiRef) => {\n  var _ref, _props$filterModel, _props$initialState, _props$initialState$f;\n  const filterModel = (_ref = (_props$filterModel = props.filterModel) != null ? _props$filterModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$f = _props$initialState.filter) == null ? void 0 : _props$initialState$f.filterModel) != null ? _ref : getDefaultGridFilterModel();\n  return _extends({}, state, {\n    filter: {\n      filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef),\n      visibleRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    }\n  });\n};\n\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n * @requires useGridRows (event)\n */\nexport const useGridFilter = (apiRef, props) => {\n  var _props$initialState3, _props$initialState3$, _props$slotProps2;\n  const logger = useGridLogger(apiRef, 'useGridFilter');\n  apiRef.current.registerControlState({\n    stateId: 'filter',\n    propModel: props.filterModel,\n    propOnChange: props.onFilterModelChange,\n    stateSelector: gridFilterModelSelector,\n    changeEvent: 'filterModelChange'\n  });\n  const updateFilteredRows = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const filterModel = gridFilterModelSelector(state, apiRef.current.instanceId);\n      const isRowMatchingFilters = props.filterMode === 'client' ? buildAggregatedFilterApplier(filterModel, apiRef) : null;\n      const filteringResult = apiRef.current.applyStrategyProcessor('filtering', {\n        isRowMatchingFilters,\n        filterModel: filterModel != null ? filterModel : getDefaultGridFilterModel()\n      });\n      return _extends({}, state, {\n        filter: _extends({}, state.filter, filteringResult)\n      });\n    });\n    apiRef.current.publishEvent('filteredRowsSet');\n  }, [props.filterMode, apiRef]);\n  const addColumnMenuItem = React.useCallback((columnMenuItems, colDef) => {\n    if (colDef == null || colDef.filterable === false || props.disableColumnFilter) {\n      return columnMenuItems;\n    }\n    return [...columnMenuItems, 'ColumnMenuFilterItem'];\n  }, [props.disableColumnFilter]);\n\n  /**\n   * API METHODS\n   */\n  const applyFilters = React.useCallback(() => {\n    updateFilteredRows();\n    apiRef.current.forceUpdate();\n  }, [apiRef, updateFilteredRows]);\n  const upsertFilterItem = React.useCallback(item => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = [...filterModel.items];\n    const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n    if (itemIndex === -1) {\n      items.push(item);\n    } else {\n      items[itemIndex] = item;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItem');\n  }, [apiRef]);\n  const upsertFilterItems = React.useCallback(items => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const existingItems = [...filterModel.items];\n    items.forEach(item => {\n      const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n      if (itemIndex === -1) {\n        existingItems.push(item);\n      } else {\n        existingItems[itemIndex] = item;\n      }\n    });\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItems');\n  }, [apiRef]);\n  const deleteFilterItem = React.useCallback(itemToDelete => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = filterModel.items.filter(item => item.id !== itemToDelete.id);\n    if (items.length === filterModel.items.length) {\n      return;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'deleteFilterItem');\n  }, [apiRef]);\n  const showFilterPanel = React.useCallback(targetColumnField => {\n    logger.debug('Displaying filter panel');\n    if (targetColumnField) {\n      const filterModel = gridFilterModelSelector(apiRef);\n      const filterItemsWithValue = filterModel.items.filter(item => {\n        var _column$filterOperato;\n        if (item.value !== undefined) {\n          return true;\n        }\n        const column = apiRef.current.getColumn(item.field);\n        const filterOperator = (_column$filterOperato = column.filterOperators) == null ? void 0 : _column$filterOperato.find(operator => operator.value === item.operator);\n        const requiresFilterValue = typeof (filterOperator == null ? void 0 : filterOperator.requiresFilterValue) === 'undefined' ? true : filterOperator == null ? void 0 : filterOperator.requiresFilterValue;\n\n        // Operators like `isEmpty` don't have and don't require `item.value`.\n        // So we don't want to remove them from the filter model if `item.value === undefined`.\n        // See https://github.com/mui/mui-x/issues/5402\n        if (requiresFilterValue) {\n          return false;\n        }\n        return true;\n      });\n      let newFilterItems;\n      const filterItemOnTarget = filterItemsWithValue.find(item => item.field === targetColumnField);\n      const targetColumn = apiRef.current.getColumn(targetColumnField);\n      if (filterItemOnTarget) {\n        newFilterItems = filterItemsWithValue;\n      } else if (props.disableMultipleColumnsFiltering) {\n        newFilterItems = [cleanFilterItem({\n          field: targetColumnField,\n          operator: targetColumn.filterOperators[0].value\n        }, apiRef)];\n      } else {\n        newFilterItems = [...filterItemsWithValue, cleanFilterItem({\n          field: targetColumnField,\n          operator: targetColumn.filterOperators[0].value\n        }, apiRef)];\n      }\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n    apiRef.current.showPreferences(GridPreferencePanelsValue.filters);\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const hideFilterPanel = React.useCallback(() => {\n    logger.debug('Hiding filter panel');\n    apiRef.current.hidePreferences();\n  }, [apiRef, logger]);\n  const setFilterLogicOperator = React.useCallback(logicOperator => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    if (filterModel.logicOperator === logicOperator) {\n      return;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      logicOperator\n    }), 'changeLogicOperator');\n  }, [apiRef]);\n  const setQuickFilterValues = React.useCallback(values => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    if (isDeepEqual(filterModel.quickFilterValues, values)) {\n      return;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      quickFilterValues: [...values]\n    }));\n  }, [apiRef]);\n  const setFilterModel = React.useCallback((model, reason) => {\n    const currentModel = gridFilterModelSelector(apiRef);\n    if (currentModel !== model) {\n      logger.debug('Setting filter model');\n      apiRef.current.updateControlState('filter', mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef), reason);\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const filterApi = {\n    setFilterLogicOperator,\n    unstable_applyFilters: applyFilters,\n    deleteFilterItem,\n    upsertFilterItem,\n    upsertFilterItems,\n    setFilterModel,\n    showFilterPanel,\n    hideFilterPanel,\n    setQuickFilterValues\n  };\n  useGridApiMethod(apiRef, filterApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState2, _props$initialState2$;\n    const filterModelToExport = gridFilterModelSelector(apiRef);\n    const shouldExportFilterModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the model is controlled\n    props.filterModel != null ||\n    // Always export if the model has been initialized\n    ((_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.filter) == null ? void 0 : _props$initialState2$.filterModel) != null ||\n    // Export if the model is not equal to the default value\n    !isDeepEqual(filterModelToExport, getDefaultGridFilterModel());\n    if (!shouldExportFilterModel) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      filter: {\n        filterModel: filterModelToExport\n      }\n    });\n  }, [apiRef, props.filterModel, (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.filter) == null ? void 0 : _props$initialState3$.filterModel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n    const filterModel = (_context$stateToResto = context.stateToRestore.filter) == null ? void 0 : _context$stateToResto.filterModel;\n    if (filterModel == null) {\n      return params;\n    }\n    apiRef.current.updateControlState('filter', mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef), 'restoreState');\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.unstable_applyFilters]\n    });\n  }, [apiRef, props.disableMultipleColumnsFiltering]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.filters) {\n      var _props$slotProps;\n      const FilterPanel = props.slots.filterPanel;\n      return /*#__PURE__*/_jsx(FilterPanel, _extends({}, (_props$slotProps = props.slotProps) == null ? void 0 : _props$slotProps.filterPanel));\n    }\n    return initialValue;\n  }, [props.slots.filterPanel, (_props$slotProps2 = props.slotProps) == null ? void 0 : _props$slotProps2.filterPanel]);\n  const flatFilteringMethod = React.useCallback(params => {\n    if (props.filterMode === 'client' && params.isRowMatchingFilters) {\n      const tree = gridRowTreeSelector(apiRef);\n      const rowIds = tree[GRID_ROOT_GROUP_ID].children;\n      const filteredRowsLookup = {};\n      for (let i = 0; i < rowIds.length; i += 1) {\n        const rowId = rowIds[i];\n        let isRowPassing;\n        if (typeof rowId === 'string' && rowId.startsWith('auto-generated-group-footer')) {\n          isRowPassing = true;\n        } else {\n          const {\n            passingFilterItems,\n            passingQuickFilterValues\n          } = params.isRowMatchingFilters(rowId);\n          isRowPassing = passFilterLogic([passingFilterItems], [passingQuickFilterValues], params.filterModel, apiRef);\n        }\n        filteredRowsLookup[rowId] = isRowPassing;\n      }\n      return {\n        filteredRowsLookup,\n        // For flat tree, the `visibleRowsLookup` and the `filteredRowsLookup` are equals since no row is collapsed.\n        visibleRowsLookup: filteredRowsLookup,\n        filteredDescendantCountLookup: {}\n      };\n    }\n    return {\n      visibleRowsLookup: {},\n      filteredRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    };\n  }, [apiRef, props.filterMode]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuItem);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'filtering', flatFilteringMethod);\n\n  /**\n   * EVENTS\n   */\n  const handleColumnsChange = React.useCallback(() => {\n    logger.debug('onColUpdated - GridColumns changed, applying filters');\n    const filterModel = gridFilterModelSelector(apiRef);\n    const filterableColumnsLookup = gridFilterableColumnLookupSelector(apiRef);\n    const newFilterItems = filterModel.items.filter(item => item.field && filterableColumnsLookup[item.field]);\n    if (newFilterItems.length < filterModel.items.length) {\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n  }, [apiRef, logger]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'filtering') {\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef]);\n\n  // Do not call `apiRef.current.forceUpdate` to avoid re-render before updating the sorted rows.\n  // Otherwise, the state is not consistent during the render\n  useGridApiEventHandler(apiRef, 'rowsSet', updateFilteredRows);\n  useGridApiEventHandler(apiRef, 'rowExpansionChange', apiRef.current.unstable_applyFilters);\n  useGridApiEventHandler(apiRef, 'columnsChange', handleColumnsChange);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n\n  /**\n   * 1ST RENDER\n   */\n  useFirstRender(() => {\n    apiRef.current.unstable_applyFilters();\n  });\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    if (props.filterModel !== undefined) {\n      apiRef.current.setFilterModel(props.filterModel);\n    }\n  }, [apiRef, logger, props.filterModel]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}