{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"selected\", \"rowId\", \"row\", \"index\", \"style\", \"position\", \"rowHeight\", \"className\", \"visibleColumns\", \"renderedColumns\", \"containerWidth\", \"firstColumnToRender\", \"lastColumnToRender\", \"isLastVisible\", \"focusedCell\", \"tabbableCell\", \"onClick\", \"onDoubleClick\", \"onMouseEnter\", \"onMouseLeave\"],\n  _excluded2 = [\"changeReason\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { GridEditModes, GridRowModes, GridCellModes } from '../models/gridEditRowModel';\nimport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nimport { getDataGridUtilityClass, gridClasses } from '../constants/gridClasses';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { gridColumnsTotalWidthSelector } from '../hooks/features/columns/gridColumnsSelector';\nimport { useGridSelector } from '../hooks/utils/useGridSelector';\nimport { useGridVisibleRows } from '../hooks/utils/useGridVisibleRows';\nimport { findParentElementFromClassName } from '../utils/domUtils';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../colDef/gridCheckboxSelectionColDef';\nimport { GRID_ACTIONS_COLUMN_TYPE } from '../colDef/gridActionsColDef';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../constants/gridDetailPanelToggleField';\nimport { gridSortModelSelector } from '../hooks/features/sorting/gridSortingSelector';\nimport { gridRowMaximumTreeDepthSelector } from '../hooks/features/rows/gridRowsSelector';\nimport { gridColumnGroupsHeaderMaxDepthSelector } from '../hooks/features/columnGrouping/gridColumnGroupsSelector';\nimport { randomNumberBetween } from '../utils/utils';\nimport { gridEditRowsStateSelector } from '../hooks/features/editing/gridEditingSelectors';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    editable,\n    editing,\n    selected,\n    isLastVisible,\n    rowHeight,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['row', selected && 'selected', editable && 'row--editable', editing && 'row--editing', isLastVisible && 'row--lastVisible', rowHeight === 'auto' && 'row--dynamicHeight']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nfunction EmptyCell(_ref) {\n  let {\n    width\n  } = _ref;\n  if (!width) {\n    return null;\n  }\n  const style = {\n    width\n  };\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: \"MuiDataGrid-cell MuiDataGrid-withBorderColor\",\n    style: style\n  }); // TODO change to .MuiDataGrid-emptyCell or .MuiDataGrid-rowFiller\n}\n\nconst GridRow = /*#__PURE__*/React.forwardRef(function GridRow(props, refProp) {\n  const {\n      selected,\n      rowId,\n      row,\n      index,\n      style: styleProp,\n      position,\n      rowHeight,\n      className,\n      renderedColumns,\n      containerWidth,\n      firstColumnToRender,\n      isLastVisible = false,\n      focusedCell,\n      tabbableCell,\n      onClick,\n      onDoubleClick,\n      onMouseEnter,\n      onMouseLeave\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const apiRef = useGridApiContext();\n  const ref = React.useRef(null);\n  const rootProps = useGridRootProps();\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const sortModel = useGridSelector(apiRef, gridSortModelSelector);\n  const treeDepth = useGridSelector(apiRef, gridRowMaximumTreeDepthSelector);\n  const headerGroupingMaxDepth = useGridSelector(apiRef, gridColumnGroupsHeaderMaxDepthSelector);\n  const editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);\n  const handleRef = useForkRef(ref, refProp);\n  const ariaRowIndex = index + headerGroupingMaxDepth + 2; // 1 for the header row and 1 as it's 1-based\n\n  const ownerState = {\n    selected,\n    isLastVisible,\n    classes: rootProps.classes,\n    editing: apiRef.current.getRowMode(rowId) === GridRowModes.Edit,\n    editable: rootProps.editMode === GridEditModes.Row,\n    rowHeight\n  };\n  const classes = useUtilityClasses(ownerState);\n  React.useLayoutEffect(() => {\n    if (rowHeight === 'auto' && ref.current && typeof ResizeObserver === 'undefined') {\n      // Fallback for IE\n      apiRef.current.unstable_storeRowHeightMeasurement(rowId, ref.current.clientHeight, position);\n    }\n  }, [apiRef, rowHeight, rowId, position]);\n  React.useLayoutEffect(() => {\n    if (currentPage.range) {\n      // The index prop is relative to the rows from all pages. As example, the index prop of the\n      // first row is 5 if `paginationModel.pageSize=5` and `paginationModel.page=1`. However, the index used by the virtualization\n      // doesn't care about pagination and considers the rows from the current page only, so the\n      // first row always has index=0. We need to subtract the index of the first row to make it\n      // compatible with the index used by the virtualization.\n      const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(rowId);\n      // pinned rows are not part of the visible rows\n      if (rowIndex != null) {\n        apiRef.current.unstable_setLastMeasuredRowIndex(rowIndex);\n      }\n    }\n    const rootElement = ref.current;\n    const hasFixedHeight = rowHeight !== 'auto';\n    if (!rootElement || hasFixedHeight || typeof ResizeObserver === 'undefined') {\n      return undefined;\n    }\n    const resizeObserver = new ResizeObserver(entries => {\n      const [entry] = entries;\n      const height = entry.borderBoxSize && entry.borderBoxSize.length > 0 ? entry.borderBoxSize[0].blockSize : entry.contentRect.height;\n      apiRef.current.unstable_storeRowHeightMeasurement(rowId, height, position);\n    });\n    resizeObserver.observe(rootElement);\n    return () => resizeObserver.disconnect();\n  }, [apiRef, currentPage.range, index, rowHeight, rowId, position]);\n  const publish = React.useCallback((eventName, propHandler) => event => {\n    // Ignore portal\n    // The target is not an element when triggered by a Select inside the cell\n    // See https://github.com/mui/material-ui/issues/10534\n    if (event.target.nodeType === 1 && !event.currentTarget.contains(event.target)) {\n      return;\n    }\n\n    // The row might have been deleted\n    if (!apiRef.current.getRow(rowId)) {\n      return;\n    }\n    apiRef.current.publishEvent(eventName, apiRef.current.getRowParams(rowId), event);\n    if (propHandler) {\n      propHandler(event);\n    }\n  }, [apiRef, rowId]);\n  const publishClick = React.useCallback(event => {\n    const cell = findParentElementFromClassName(event.target, gridClasses.cell);\n    const field = cell == null ? void 0 : cell.getAttribute('data-field');\n\n    // Check if the field is available because the cell that fills the empty\n    // space of the row has no field.\n    if (field) {\n      // User clicked in the checkbox added by checkboxSelection\n      if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n        return;\n      }\n\n      // User opened a detail panel\n      if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n        return;\n      }\n\n      // User reorders a row\n      if (field === '__reorder__') {\n        return;\n      }\n\n      // User is editing a cell\n      if (apiRef.current.getCellMode(rowId, field) === GridCellModes.Edit) {\n        return;\n      }\n\n      // User clicked a button from the \"actions\" column type\n      const column = apiRef.current.getColumn(field);\n      if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n    publish('rowClick', onClick)(event);\n  }, [apiRef, onClick, publish, rowId]);\n  const {\n    slots,\n    slotProps,\n    classes: rootClasses,\n    disableColumnReorder,\n    getCellClassName\n  } = rootProps;\n  const rowReordering = rootProps.rowReordering;\n  const CellComponent = slots.cell;\n  const getCell = React.useCallback((column, cellProps) => {\n    const cellParams = apiRef.current.getCellParams(rowId, column.field);\n    const classNames = apiRef.current.unstable_applyPipeProcessors('cellClassName', [], {\n      id: rowId,\n      field: column.field\n    });\n    const disableDragEvents = disableColumnReorder && column.disableReorder || !rowReordering && !!sortModel.length && treeDepth > 1 && Object.keys(editRowsState).length > 0;\n    if (column.cellClassName) {\n      classNames.push(clsx(typeof column.cellClassName === 'function' ? column.cellClassName(cellParams) : column.cellClassName));\n    }\n    const editCellState = editRowsState[rowId] ? editRowsState[rowId][column.field] : null;\n    let content;\n    if (editCellState == null && column.renderCell) {\n      content = column.renderCell(_extends({}, cellParams, {\n        api: apiRef.current\n      }));\n      // TODO move to GridCell\n      classNames.push(clsx(gridClasses['cell--withRenderer'], rootClasses == null ? void 0 : rootClasses['cell--withRenderer']));\n    }\n    if (editCellState != null && column.renderEditCell) {\n      const updatedRow = apiRef.current.getRowWithUpdatedValues(rowId, column.field);\n      const editCellStateRest = _objectWithoutPropertiesLoose(editCellState, _excluded2);\n      const params = _extends({}, cellParams, {\n        row: updatedRow\n      }, editCellStateRest, {\n        api: apiRef.current\n      });\n      content = column.renderEditCell(params);\n      // TODO move to GridCell\n      classNames.push(clsx(gridClasses['cell--editing'], rootClasses == null ? void 0 : rootClasses['cell--editing']));\n    }\n    if (getCellClassName) {\n      // TODO move to GridCell\n      classNames.push(getCellClassName(cellParams));\n    }\n    const hasFocus = focusedCell === column.field;\n    const tabIndex = tabbableCell === column.field ? 0 : -1;\n    const isSelected = apiRef.current.unstable_applyPipeProcessors('isCellSelected', false, {\n      id: rowId,\n      field: column.field\n    });\n    return /*#__PURE__*/_jsx(CellComponent, _extends({\n      value: cellParams.value,\n      field: column.field,\n      width: cellProps.width,\n      rowId: rowId,\n      height: rowHeight,\n      showRightBorder: cellProps.showRightBorder,\n      formattedValue: cellParams.formattedValue,\n      align: column.align || 'left',\n      cellMode: cellParams.cellMode,\n      colIndex: cellProps.indexRelativeToAllColumns,\n      isEditable: cellParams.isEditable,\n      isSelected: isSelected,\n      hasFocus: hasFocus,\n      tabIndex: tabIndex,\n      className: clsx(classNames),\n      colSpan: cellProps.colSpan,\n      disableDragEvents: disableDragEvents\n    }, slotProps == null ? void 0 : slotProps.cell, {\n      children: content\n    }), column.field);\n  }, [apiRef, rowId, disableColumnReorder, rowReordering, sortModel.length, treeDepth, editRowsState, getCellClassName, focusedCell, tabbableCell, CellComponent, rowHeight, slotProps == null ? void 0 : slotProps.cell, rootClasses]);\n  const sizes = apiRef.current.unstable_getRowInternalSizes(rowId);\n  let minHeight = rowHeight;\n  if (minHeight === 'auto' && sizes) {\n    let numberOfBaseSizes = 0;\n    const maximumSize = Object.entries(sizes).reduce((acc, _ref2) => {\n      let [key, size] = _ref2;\n      const isBaseHeight = /^base[A-Z]/.test(key);\n      if (!isBaseHeight) {\n        return acc;\n      }\n      numberOfBaseSizes += 1;\n      if (size > acc) {\n        return size;\n      }\n      return acc;\n    }, 0);\n    if (maximumSize > 0 && numberOfBaseSizes > 1) {\n      minHeight = maximumSize;\n    }\n  }\n  const style = _extends({}, styleProp, {\n    maxHeight: rowHeight === 'auto' ? 'none' : rowHeight,\n    // max-height doesn't support \"auto\"\n    minHeight\n  });\n  if (sizes != null && sizes.spacingTop) {\n    const property = rootProps.rowSpacingType === 'border' ? 'borderTopWidth' : 'marginTop';\n    style[property] = sizes.spacingTop;\n  }\n  if (sizes != null && sizes.spacingBottom) {\n    const property = rootProps.rowSpacingType === 'border' ? 'borderBottomWidth' : 'marginBottom';\n    let propertyValue = style[property];\n    // avoid overriding existing value\n    if (typeof propertyValue !== 'number') {\n      propertyValue = parseInt(propertyValue || '0', 10);\n    }\n    propertyValue += sizes.spacingBottom;\n    style[property] = propertyValue;\n  }\n  const rowClassNames = apiRef.current.unstable_applyPipeProcessors('rowClassName', [], rowId);\n  if (typeof rootProps.getRowClassName === 'function') {\n    var _currentPage$range;\n    const indexRelativeToCurrentPage = index - (((_currentPage$range = currentPage.range) == null ? void 0 : _currentPage$range.firstRowIndex) || 0);\n    const rowParams = _extends({}, apiRef.current.getRowParams(rowId), {\n      isFirstVisible: indexRelativeToCurrentPage === 0,\n      isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n      indexRelativeToCurrentPage\n    });\n    rowClassNames.push(rootProps.getRowClassName(rowParams));\n  }\n  const randomNumber = randomNumberBetween(10000, 20, 80);\n  const rowType = apiRef.current.getRowNode(rowId).type;\n  const cells = [];\n  for (let i = 0; i < renderedColumns.length; i += 1) {\n    const column = renderedColumns[i];\n    const indexRelativeToAllColumns = firstColumnToRender + i;\n    const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, indexRelativeToAllColumns);\n    if (cellColSpanInfo && !cellColSpanInfo.spannedByColSpan) {\n      if (rowType !== 'skeletonRow') {\n        const {\n          colSpan,\n          width\n        } = cellColSpanInfo.cellProps;\n        const cellProps = {\n          width,\n          colSpan,\n          showRightBorder: rootProps.showCellVerticalBorder,\n          indexRelativeToAllColumns\n        };\n        cells.push(getCell(column, cellProps));\n      } else {\n        const {\n          width\n        } = cellColSpanInfo.cellProps;\n        const contentWidth = Math.round(randomNumber());\n        cells.push( /*#__PURE__*/_jsx(rootProps.slots.skeletonCell, {\n          width: width,\n          contentWidth: contentWidth,\n          field: column.field,\n          align: column.align\n        }, column.field));\n      }\n    }\n  }\n  const emptyCellWidth = containerWidth - columnsTotalWidth;\n  const eventHandlers = row ? {\n    onClick: publishClick,\n    onDoubleClick: publish('rowDoubleClick', onDoubleClick),\n    onMouseEnter: publish('rowMouseEnter', onMouseEnter),\n    onMouseLeave: publish('rowMouseLeave', onMouseLeave)\n  } : null;\n  return /*#__PURE__*/_jsxs(\"div\", _extends({\n    ref: handleRef,\n    \"data-id\": rowId,\n    \"data-rowindex\": index,\n    role: \"row\",\n    className: clsx(...rowClassNames, classes.root, className),\n    \"aria-rowindex\": ariaRowIndex,\n    \"aria-selected\": selected,\n    style: style\n  }, eventHandlers, other, {\n    children: [cells, emptyCellWidth > 0 && /*#__PURE__*/_jsx(EmptyCell, {\n      width: emptyCellWidth\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridRow.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  containerWidth: PropTypes.number,\n  firstColumnToRender: PropTypes.number,\n  /**\n   * Determines which cell has focus.\n   * If `null`, no cell in this row has focus.\n   */\n  focusedCell: PropTypes.string,\n  /**\n   * Index of the row in the whole sorted and filtered dataset.\n   * If some rows above have expanded children, this index also take those children into account.\n   */\n  index: PropTypes.number,\n  isLastVisible: PropTypes.bool,\n  lastColumnToRender: PropTypes.number,\n  onClick: PropTypes.func,\n  onDoubleClick: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  position: PropTypes.oneOf(['center', 'left', 'right']),\n  renderedColumns: PropTypes.arrayOf(PropTypes.object),\n  row: PropTypes.object,\n  rowHeight: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number]),\n  rowId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  selected: PropTypes.bool,\n  /**\n   * Determines which cell should be tabbable by having tabIndex=0.\n   * If `null`, no cell in this row is in the tab sequence.\n   */\n  tabbableCell: PropTypes.string,\n  visibleColumns: PropTypes.arrayOf(PropTypes.object)\n} : void 0;\nexport { GridRow };","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","_excluded2","React","PropTypes","clsx","unstable_composeClasses","composeClasses","unstable_useForkRef","useForkRef","GridEditModes","GridRowModes","GridCellModes","useGridApiContext","getDataGridUtilityClass","gridClasses","useGridRootProps","gridColumnsTotalWidthSelector","useGridSelector","useGridVisibleRows","findParentElementFromClassName","GRID_CHECKBOX_SELECTION_COL_DEF","GRID_ACTIONS_COLUMN_TYPE","GRID_DETAIL_PANEL_TOGGLE_FIELD","gridSortModelSelector","gridRowMaximumTreeDepthSelector","gridColumnGroupsHeaderMaxDepthSelector","randomNumberBetween","gridEditRowsStateSelector","jsx","_jsx","jsxs","_jsxs","useUtilityClasses","ownerState","editable","editing","selected","isLastVisible","rowHeight","classes","slots","root","EmptyCell","_ref","width","style","className","GridRow","forwardRef","props","refProp","rowId","row","index","styleProp","position","renderedColumns","containerWidth","firstColumnToRender","focusedCell","tabbableCell","onClick","onDoubleClick","onMouseEnter","onMouseLeave","other","apiRef","ref","useRef","rootProps","currentPage","columnsTotalWidth","sortModel","treeDepth","headerGroupingMaxDepth","editRowsState","handleRef","ariaRowIndex","current","getRowMode","Edit","editMode","Row","useLayoutEffect","ResizeObserver","unstable_storeRowHeightMeasurement","clientHeight","range","rowIndex","getRowIndexRelativeToVisibleRows","unstable_setLastMeasuredRowIndex","rootElement","hasFixedHeight","undefined","resizeObserver","entries","entry","height","borderBoxSize","length","blockSize","contentRect","observe","disconnect","publish","useCallback","eventName","propHandler","event","target","nodeType","currentTarget","contains","getRow","publishEvent","getRowParams","publishClick","cell","field","getAttribute","getCellMode","column","getColumn","type","slotProps","rootClasses","disableColumnReorder","getCellClassName","rowReordering","CellComponent","getCell","cellProps","cellParams","getCellParams","classNames","unstable_applyPipeProcessors","id","disableDragEvents","disableReorder","Object","keys","cellClassName","push","editCellState","content","renderCell","api","renderEditCell","updatedRow","getRowWithUpdatedValues","editCellStateRest","params","hasFocus","tabIndex","isSelected","value","showRightBorder","formattedValue","align","cellMode","colIndex","indexRelativeToAllColumns","isEditable","colSpan","children","sizes","unstable_getRowInternalSizes","minHeight","numberOfBaseSizes","maximumSize","reduce","acc","_ref2","key","size","isBaseHeight","test","maxHeight","spacingTop","property","rowSpacingType","spacingBottom","propertyValue","parseInt","rowClassNames","getRowClassName","_currentPage$range","indexRelativeToCurrentPage","firstRowIndex","rowParams","isFirstVisible","rows","randomNumber","rowType","getRowNode","cells","i","cellColSpanInfo","unstable_getCellColSpanInfo","spannedByColSpan","showCellVerticalBorder","contentWidth","Math","round","skeletonCell","emptyCellWidth","eventHandlers","role","process","env","NODE_ENV","propTypes","number","string","bool","lastColumnToRender","func","oneOf","arrayOf","object","oneOfType","visibleColumns"],"sources":["/Users/oscar.garzon/Documents/breakable_toy_chidisimo/front-end/node_modules/@mui/x-data-grid/components/GridRow.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"selected\", \"rowId\", \"row\", \"index\", \"style\", \"position\", \"rowHeight\", \"className\", \"visibleColumns\", \"renderedColumns\", \"containerWidth\", \"firstColumnToRender\", \"lastColumnToRender\", \"isLastVisible\", \"focusedCell\", \"tabbableCell\", \"onClick\", \"onDoubleClick\", \"onMouseEnter\", \"onMouseLeave\"],\n  _excluded2 = [\"changeReason\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { GridEditModes, GridRowModes, GridCellModes } from '../models/gridEditRowModel';\nimport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nimport { getDataGridUtilityClass, gridClasses } from '../constants/gridClasses';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { gridColumnsTotalWidthSelector } from '../hooks/features/columns/gridColumnsSelector';\nimport { useGridSelector } from '../hooks/utils/useGridSelector';\nimport { useGridVisibleRows } from '../hooks/utils/useGridVisibleRows';\nimport { findParentElementFromClassName } from '../utils/domUtils';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../colDef/gridCheckboxSelectionColDef';\nimport { GRID_ACTIONS_COLUMN_TYPE } from '../colDef/gridActionsColDef';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../constants/gridDetailPanelToggleField';\nimport { gridSortModelSelector } from '../hooks/features/sorting/gridSortingSelector';\nimport { gridRowMaximumTreeDepthSelector } from '../hooks/features/rows/gridRowsSelector';\nimport { gridColumnGroupsHeaderMaxDepthSelector } from '../hooks/features/columnGrouping/gridColumnGroupsSelector';\nimport { randomNumberBetween } from '../utils/utils';\nimport { gridEditRowsStateSelector } from '../hooks/features/editing/gridEditingSelectors';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    editable,\n    editing,\n    selected,\n    isLastVisible,\n    rowHeight,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['row', selected && 'selected', editable && 'row--editable', editing && 'row--editing', isLastVisible && 'row--lastVisible', rowHeight === 'auto' && 'row--dynamicHeight']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nfunction EmptyCell({\n  width\n}) {\n  if (!width) {\n    return null;\n  }\n  const style = {\n    width\n  };\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: \"MuiDataGrid-cell MuiDataGrid-withBorderColor\",\n    style: style\n  }); // TODO change to .MuiDataGrid-emptyCell or .MuiDataGrid-rowFiller\n}\n\nconst GridRow = /*#__PURE__*/React.forwardRef(function GridRow(props, refProp) {\n  const {\n      selected,\n      rowId,\n      row,\n      index,\n      style: styleProp,\n      position,\n      rowHeight,\n      className,\n      renderedColumns,\n      containerWidth,\n      firstColumnToRender,\n      isLastVisible = false,\n      focusedCell,\n      tabbableCell,\n      onClick,\n      onDoubleClick,\n      onMouseEnter,\n      onMouseLeave\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const apiRef = useGridApiContext();\n  const ref = React.useRef(null);\n  const rootProps = useGridRootProps();\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const sortModel = useGridSelector(apiRef, gridSortModelSelector);\n  const treeDepth = useGridSelector(apiRef, gridRowMaximumTreeDepthSelector);\n  const headerGroupingMaxDepth = useGridSelector(apiRef, gridColumnGroupsHeaderMaxDepthSelector);\n  const editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);\n  const handleRef = useForkRef(ref, refProp);\n  const ariaRowIndex = index + headerGroupingMaxDepth + 2; // 1 for the header row and 1 as it's 1-based\n\n  const ownerState = {\n    selected,\n    isLastVisible,\n    classes: rootProps.classes,\n    editing: apiRef.current.getRowMode(rowId) === GridRowModes.Edit,\n    editable: rootProps.editMode === GridEditModes.Row,\n    rowHeight\n  };\n  const classes = useUtilityClasses(ownerState);\n  React.useLayoutEffect(() => {\n    if (rowHeight === 'auto' && ref.current && typeof ResizeObserver === 'undefined') {\n      // Fallback for IE\n      apiRef.current.unstable_storeRowHeightMeasurement(rowId, ref.current.clientHeight, position);\n    }\n  }, [apiRef, rowHeight, rowId, position]);\n  React.useLayoutEffect(() => {\n    if (currentPage.range) {\n      // The index prop is relative to the rows from all pages. As example, the index prop of the\n      // first row is 5 if `paginationModel.pageSize=5` and `paginationModel.page=1`. However, the index used by the virtualization\n      // doesn't care about pagination and considers the rows from the current page only, so the\n      // first row always has index=0. We need to subtract the index of the first row to make it\n      // compatible with the index used by the virtualization.\n      const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(rowId);\n      // pinned rows are not part of the visible rows\n      if (rowIndex != null) {\n        apiRef.current.unstable_setLastMeasuredRowIndex(rowIndex);\n      }\n    }\n    const rootElement = ref.current;\n    const hasFixedHeight = rowHeight !== 'auto';\n    if (!rootElement || hasFixedHeight || typeof ResizeObserver === 'undefined') {\n      return undefined;\n    }\n    const resizeObserver = new ResizeObserver(entries => {\n      const [entry] = entries;\n      const height = entry.borderBoxSize && entry.borderBoxSize.length > 0 ? entry.borderBoxSize[0].blockSize : entry.contentRect.height;\n      apiRef.current.unstable_storeRowHeightMeasurement(rowId, height, position);\n    });\n    resizeObserver.observe(rootElement);\n    return () => resizeObserver.disconnect();\n  }, [apiRef, currentPage.range, index, rowHeight, rowId, position]);\n  const publish = React.useCallback((eventName, propHandler) => event => {\n    // Ignore portal\n    // The target is not an element when triggered by a Select inside the cell\n    // See https://github.com/mui/material-ui/issues/10534\n    if (event.target.nodeType === 1 && !event.currentTarget.contains(event.target)) {\n      return;\n    }\n\n    // The row might have been deleted\n    if (!apiRef.current.getRow(rowId)) {\n      return;\n    }\n    apiRef.current.publishEvent(eventName, apiRef.current.getRowParams(rowId), event);\n    if (propHandler) {\n      propHandler(event);\n    }\n  }, [apiRef, rowId]);\n  const publishClick = React.useCallback(event => {\n    const cell = findParentElementFromClassName(event.target, gridClasses.cell);\n    const field = cell == null ? void 0 : cell.getAttribute('data-field');\n\n    // Check if the field is available because the cell that fills the empty\n    // space of the row has no field.\n    if (field) {\n      // User clicked in the checkbox added by checkboxSelection\n      if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n        return;\n      }\n\n      // User opened a detail panel\n      if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n        return;\n      }\n\n      // User reorders a row\n      if (field === '__reorder__') {\n        return;\n      }\n\n      // User is editing a cell\n      if (apiRef.current.getCellMode(rowId, field) === GridCellModes.Edit) {\n        return;\n      }\n\n      // User clicked a button from the \"actions\" column type\n      const column = apiRef.current.getColumn(field);\n      if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n    publish('rowClick', onClick)(event);\n  }, [apiRef, onClick, publish, rowId]);\n  const {\n    slots,\n    slotProps,\n    classes: rootClasses,\n    disableColumnReorder,\n    getCellClassName\n  } = rootProps;\n  const rowReordering = rootProps.rowReordering;\n  const CellComponent = slots.cell;\n  const getCell = React.useCallback((column, cellProps) => {\n    const cellParams = apiRef.current.getCellParams(rowId, column.field);\n    const classNames = apiRef.current.unstable_applyPipeProcessors('cellClassName', [], {\n      id: rowId,\n      field: column.field\n    });\n    const disableDragEvents = disableColumnReorder && column.disableReorder || !rowReordering && !!sortModel.length && treeDepth > 1 && Object.keys(editRowsState).length > 0;\n    if (column.cellClassName) {\n      classNames.push(clsx(typeof column.cellClassName === 'function' ? column.cellClassName(cellParams) : column.cellClassName));\n    }\n    const editCellState = editRowsState[rowId] ? editRowsState[rowId][column.field] : null;\n    let content;\n    if (editCellState == null && column.renderCell) {\n      content = column.renderCell(_extends({}, cellParams, {\n        api: apiRef.current\n      }));\n      // TODO move to GridCell\n      classNames.push(clsx(gridClasses['cell--withRenderer'], rootClasses == null ? void 0 : rootClasses['cell--withRenderer']));\n    }\n    if (editCellState != null && column.renderEditCell) {\n      const updatedRow = apiRef.current.getRowWithUpdatedValues(rowId, column.field);\n      const editCellStateRest = _objectWithoutPropertiesLoose(editCellState, _excluded2);\n      const params = _extends({}, cellParams, {\n        row: updatedRow\n      }, editCellStateRest, {\n        api: apiRef.current\n      });\n      content = column.renderEditCell(params);\n      // TODO move to GridCell\n      classNames.push(clsx(gridClasses['cell--editing'], rootClasses == null ? void 0 : rootClasses['cell--editing']));\n    }\n    if (getCellClassName) {\n      // TODO move to GridCell\n      classNames.push(getCellClassName(cellParams));\n    }\n    const hasFocus = focusedCell === column.field;\n    const tabIndex = tabbableCell === column.field ? 0 : -1;\n    const isSelected = apiRef.current.unstable_applyPipeProcessors('isCellSelected', false, {\n      id: rowId,\n      field: column.field\n    });\n    return /*#__PURE__*/_jsx(CellComponent, _extends({\n      value: cellParams.value,\n      field: column.field,\n      width: cellProps.width,\n      rowId: rowId,\n      height: rowHeight,\n      showRightBorder: cellProps.showRightBorder,\n      formattedValue: cellParams.formattedValue,\n      align: column.align || 'left',\n      cellMode: cellParams.cellMode,\n      colIndex: cellProps.indexRelativeToAllColumns,\n      isEditable: cellParams.isEditable,\n      isSelected: isSelected,\n      hasFocus: hasFocus,\n      tabIndex: tabIndex,\n      className: clsx(classNames),\n      colSpan: cellProps.colSpan,\n      disableDragEvents: disableDragEvents\n    }, slotProps == null ? void 0 : slotProps.cell, {\n      children: content\n    }), column.field);\n  }, [apiRef, rowId, disableColumnReorder, rowReordering, sortModel.length, treeDepth, editRowsState, getCellClassName, focusedCell, tabbableCell, CellComponent, rowHeight, slotProps == null ? void 0 : slotProps.cell, rootClasses]);\n  const sizes = apiRef.current.unstable_getRowInternalSizes(rowId);\n  let minHeight = rowHeight;\n  if (minHeight === 'auto' && sizes) {\n    let numberOfBaseSizes = 0;\n    const maximumSize = Object.entries(sizes).reduce((acc, [key, size]) => {\n      const isBaseHeight = /^base[A-Z]/.test(key);\n      if (!isBaseHeight) {\n        return acc;\n      }\n      numberOfBaseSizes += 1;\n      if (size > acc) {\n        return size;\n      }\n      return acc;\n    }, 0);\n    if (maximumSize > 0 && numberOfBaseSizes > 1) {\n      minHeight = maximumSize;\n    }\n  }\n  const style = _extends({}, styleProp, {\n    maxHeight: rowHeight === 'auto' ? 'none' : rowHeight,\n    // max-height doesn't support \"auto\"\n    minHeight\n  });\n  if (sizes != null && sizes.spacingTop) {\n    const property = rootProps.rowSpacingType === 'border' ? 'borderTopWidth' : 'marginTop';\n    style[property] = sizes.spacingTop;\n  }\n  if (sizes != null && sizes.spacingBottom) {\n    const property = rootProps.rowSpacingType === 'border' ? 'borderBottomWidth' : 'marginBottom';\n    let propertyValue = style[property];\n    // avoid overriding existing value\n    if (typeof propertyValue !== 'number') {\n      propertyValue = parseInt(propertyValue || '0', 10);\n    }\n    propertyValue += sizes.spacingBottom;\n    style[property] = propertyValue;\n  }\n  const rowClassNames = apiRef.current.unstable_applyPipeProcessors('rowClassName', [], rowId);\n  if (typeof rootProps.getRowClassName === 'function') {\n    var _currentPage$range;\n    const indexRelativeToCurrentPage = index - (((_currentPage$range = currentPage.range) == null ? void 0 : _currentPage$range.firstRowIndex) || 0);\n    const rowParams = _extends({}, apiRef.current.getRowParams(rowId), {\n      isFirstVisible: indexRelativeToCurrentPage === 0,\n      isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n      indexRelativeToCurrentPage\n    });\n    rowClassNames.push(rootProps.getRowClassName(rowParams));\n  }\n  const randomNumber = randomNumberBetween(10000, 20, 80);\n  const rowType = apiRef.current.getRowNode(rowId).type;\n  const cells = [];\n  for (let i = 0; i < renderedColumns.length; i += 1) {\n    const column = renderedColumns[i];\n    const indexRelativeToAllColumns = firstColumnToRender + i;\n    const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, indexRelativeToAllColumns);\n    if (cellColSpanInfo && !cellColSpanInfo.spannedByColSpan) {\n      if (rowType !== 'skeletonRow') {\n        const {\n          colSpan,\n          width\n        } = cellColSpanInfo.cellProps;\n        const cellProps = {\n          width,\n          colSpan,\n          showRightBorder: rootProps.showCellVerticalBorder,\n          indexRelativeToAllColumns\n        };\n        cells.push(getCell(column, cellProps));\n      } else {\n        const {\n          width\n        } = cellColSpanInfo.cellProps;\n        const contentWidth = Math.round(randomNumber());\n        cells.push( /*#__PURE__*/_jsx(rootProps.slots.skeletonCell, {\n          width: width,\n          contentWidth: contentWidth,\n          field: column.field,\n          align: column.align\n        }, column.field));\n      }\n    }\n  }\n  const emptyCellWidth = containerWidth - columnsTotalWidth;\n  const eventHandlers = row ? {\n    onClick: publishClick,\n    onDoubleClick: publish('rowDoubleClick', onDoubleClick),\n    onMouseEnter: publish('rowMouseEnter', onMouseEnter),\n    onMouseLeave: publish('rowMouseLeave', onMouseLeave)\n  } : null;\n  return /*#__PURE__*/_jsxs(\"div\", _extends({\n    ref: handleRef,\n    \"data-id\": rowId,\n    \"data-rowindex\": index,\n    role: \"row\",\n    className: clsx(...rowClassNames, classes.root, className),\n    \"aria-rowindex\": ariaRowIndex,\n    \"aria-selected\": selected,\n    style: style\n  }, eventHandlers, other, {\n    children: [cells, emptyCellWidth > 0 && /*#__PURE__*/_jsx(EmptyCell, {\n      width: emptyCellWidth\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridRow.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  containerWidth: PropTypes.number,\n  firstColumnToRender: PropTypes.number,\n  /**\n   * Determines which cell has focus.\n   * If `null`, no cell in this row has focus.\n   */\n  focusedCell: PropTypes.string,\n  /**\n   * Index of the row in the whole sorted and filtered dataset.\n   * If some rows above have expanded children, this index also take those children into account.\n   */\n  index: PropTypes.number,\n  isLastVisible: PropTypes.bool,\n  lastColumnToRender: PropTypes.number,\n  onClick: PropTypes.func,\n  onDoubleClick: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  position: PropTypes.oneOf(['center', 'left', 'right']),\n  renderedColumns: PropTypes.arrayOf(PropTypes.object),\n  row: PropTypes.object,\n  rowHeight: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number]),\n  rowId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  selected: PropTypes.bool,\n  /**\n   * Determines which cell should be tabbable by having tabIndex=0.\n   * If `null`, no cell in this row is in the tab sequence.\n   */\n  tabbableCell: PropTypes.string,\n  visibleColumns: PropTypes.arrayOf(PropTypes.object)\n} : void 0;\nexport { GridRow };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}