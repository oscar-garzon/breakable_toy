{"ast":null,"code":"import * as React from 'react';\nimport { useGridApiMethod } from '../utils/useGridApiMethod';\nimport { GridSignature } from '../utils/useGridApiEventHandler';\nimport { EventManager } from '../../utils/EventManager';\nimport { unstable_resetCreateSelectorCache } from '../../utils/createSelector';\nconst isSyntheticEvent = event => {\n  return event.isPropagationStopped !== undefined;\n};\nlet globalId = 0;\nconst wrapPublicApi = publicApi => {\n  const privateOnlyApi = {};\n  privateOnlyApi.getPublicApi = () => publicApi;\n  privateOnlyApi.register = (visibility, methods) => {\n    Object.keys(methods).forEach(methodName => {\n      if (visibility === 'public') {\n        publicApi[methodName] = methods[methodName];\n      } else {\n        privateOnlyApi[methodName] = methods[methodName];\n      }\n    });\n  };\n  const handler = {\n    get: (obj, prop) => {\n      if (prop in obj) {\n        return obj[prop];\n      }\n      return privateOnlyApi[prop];\n    },\n    set: (obj, prop, value) => {\n      obj[prop] = value;\n      return true;\n    }\n  };\n  return new Proxy(publicApi, handler);\n};\nexport function useGridApiInitialization(inputApiRef, props) {\n  const publicApiRef = React.useRef();\n  if (!publicApiRef.current) {\n    publicApiRef.current = {\n      state: {},\n      instanceId: globalId\n    };\n    globalId += 1;\n  }\n  const privateApiRef = React.useRef();\n  if (!privateApiRef.current) {\n    privateApiRef.current = wrapPublicApi(publicApiRef.current);\n    privateApiRef.current.register('private', {\n      caches: {},\n      eventManager: new EventManager()\n    });\n  }\n  React.useImperativeHandle(inputApiRef, () => publicApiRef.current, [publicApiRef]);\n  const publishEvent = React.useCallback(function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    const [name, params, event = {}] = args;\n    event.defaultMuiPrevented = false;\n    if (isSyntheticEvent(event) && event.isPropagationStopped()) {\n      return;\n    }\n    const details = props.signature === GridSignature.DataGridPro ? {\n      api: privateApiRef.current.getPublicApi()\n    } : {};\n    privateApiRef.current.eventManager.emit(name, params, event, details);\n  }, [privateApiRef, props.signature]);\n  const subscribeEvent = React.useCallback((event, handler, options) => {\n    privateApiRef.current.eventManager.on(event, handler, options);\n    const api = privateApiRef.current;\n    return () => {\n      api.eventManager.removeListener(event, handler);\n    };\n  }, [privateApiRef]);\n  useGridApiMethod(privateApiRef, {\n    subscribeEvent,\n    publishEvent\n  }, 'public');\n  React.useEffect(() => {\n    const api = privateApiRef.current;\n    return () => {\n      unstable_resetCreateSelectorCache(api.instanceId);\n      api.publishEvent('unmount');\n    };\n  }, [privateApiRef]);\n  return privateApiRef;\n}","map":{"version":3,"names":["React","useGridApiMethod","GridSignature","EventManager","unstable_resetCreateSelectorCache","isSyntheticEvent","event","isPropagationStopped","undefined","globalId","wrapPublicApi","publicApi","privateOnlyApi","getPublicApi","register","visibility","methods","Object","keys","forEach","methodName","handler","get","obj","prop","set","value","Proxy","useGridApiInitialization","inputApiRef","props","publicApiRef","useRef","current","state","instanceId","privateApiRef","caches","eventManager","useImperativeHandle","publishEvent","useCallback","_len","arguments","length","args","Array","_key","name","params","defaultMuiPrevented","details","signature","DataGridPro","api","emit","subscribeEvent","options","on","removeListener","useEffect"],"sources":["/Users/oscar.garzon/Documents/breakable_toy_chidisimo/front-end/node_modules/@mui/x-data-grid/hooks/core/useGridApiInitialization.js"],"sourcesContent":["import * as React from 'react';\nimport { useGridApiMethod } from '../utils/useGridApiMethod';\nimport { GridSignature } from '../utils/useGridApiEventHandler';\nimport { EventManager } from '../../utils/EventManager';\nimport { unstable_resetCreateSelectorCache } from '../../utils/createSelector';\nconst isSyntheticEvent = event => {\n  return event.isPropagationStopped !== undefined;\n};\nlet globalId = 0;\nconst wrapPublicApi = publicApi => {\n  const privateOnlyApi = {};\n  privateOnlyApi.getPublicApi = () => publicApi;\n  privateOnlyApi.register = (visibility, methods) => {\n    Object.keys(methods).forEach(methodName => {\n      if (visibility === 'public') {\n        publicApi[methodName] = methods[methodName];\n      } else {\n        privateOnlyApi[methodName] = methods[methodName];\n      }\n    });\n  };\n  const handler = {\n    get: (obj, prop) => {\n      if (prop in obj) {\n        return obj[prop];\n      }\n      return privateOnlyApi[prop];\n    },\n    set: (obj, prop, value) => {\n      obj[prop] = value;\n      return true;\n    }\n  };\n  return new Proxy(publicApi, handler);\n};\nexport function useGridApiInitialization(inputApiRef, props) {\n  const publicApiRef = React.useRef();\n  if (!publicApiRef.current) {\n    publicApiRef.current = {\n      state: {},\n      instanceId: globalId\n    };\n    globalId += 1;\n  }\n  const privateApiRef = React.useRef();\n  if (!privateApiRef.current) {\n    privateApiRef.current = wrapPublicApi(publicApiRef.current);\n    privateApiRef.current.register('private', {\n      caches: {},\n      eventManager: new EventManager()\n    });\n  }\n  React.useImperativeHandle(inputApiRef, () => publicApiRef.current, [publicApiRef]);\n  const publishEvent = React.useCallback((...args) => {\n    const [name, params, event = {}] = args;\n    event.defaultMuiPrevented = false;\n    if (isSyntheticEvent(event) && event.isPropagationStopped()) {\n      return;\n    }\n    const details = props.signature === GridSignature.DataGridPro ? {\n      api: privateApiRef.current.getPublicApi()\n    } : {};\n    privateApiRef.current.eventManager.emit(name, params, event, details);\n  }, [privateApiRef, props.signature]);\n  const subscribeEvent = React.useCallback((event, handler, options) => {\n    privateApiRef.current.eventManager.on(event, handler, options);\n    const api = privateApiRef.current;\n    return () => {\n      api.eventManager.removeListener(event, handler);\n    };\n  }, [privateApiRef]);\n  useGridApiMethod(privateApiRef, {\n    subscribeEvent,\n    publishEvent\n  }, 'public');\n  React.useEffect(() => {\n    const api = privateApiRef.current;\n    return () => {\n      unstable_resetCreateSelectorCache(api.instanceId);\n      api.publishEvent('unmount');\n    };\n  }, [privateApiRef]);\n  return privateApiRef;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}