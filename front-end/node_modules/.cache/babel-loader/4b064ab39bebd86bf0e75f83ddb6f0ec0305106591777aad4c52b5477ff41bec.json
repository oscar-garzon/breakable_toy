{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridSignature, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridRowsLookupSelector } from '../rows/gridRowsSelector';\nimport { gridRowSelectionStateSelector, selectedGridRowsSelector, selectedIdsLookupSelector } from './gridRowSelectionSelector';\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from '../pagination';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridExpandedSortedRowIdsSelector } from '../filter/gridFilterSelector';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_ACTIONS_COLUMN_TYPE } from '../../../colDef';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isKeyboardEvent, isNavigationKey } from '../../../utils/keyboardUtils';\nimport { getVisibleRows, useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\nimport { gridClasses } from '../../../constants/gridClasses';\nconst getSelectionModelPropValue = (selectionModelProp, prevSelectionModel) => {\n  if (selectionModelProp == null) {\n    return selectionModelProp;\n  }\n  if (Array.isArray(selectionModelProp)) {\n    return selectionModelProp;\n  }\n  if (prevSelectionModel && prevSelectionModel[0] === selectionModelProp) {\n    return prevSelectionModel;\n  }\n  return [selectionModelProp];\n};\nexport const rowSelectionStateInitializer = (state, props) => {\n  var _getSelectionModelPro;\n  return _extends({}, state, {\n    rowSelection: props.rowSelection ? (_getSelectionModelPro = getSelectionModelPropValue(props.rowSelectionModel)) != null ? _getSelectionModelPro : [] : []\n  });\n};\n\n/**\n * @requires useGridRows (state, method) - can be after\n * @requires useGridParamsApi (method) - can be after\n * @requires useGridFocus (state) - can be after\n * @requires useGridKeyboardNavigation (`cellKeyDown` event must first be consumed by it)\n */\nexport const useGridRowSelection = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridSelection');\n  const runIfRowSelectionIsEnabled = callback => function () {\n    if (props.rowSelection) {\n      callback(...arguments);\n    }\n  };\n  const propRowSelectionModel = React.useMemo(() => {\n    return getSelectionModelPropValue(props.rowSelectionModel, gridRowSelectionStateSelector(apiRef.current.state));\n  }, [apiRef, props.rowSelectionModel]);\n  const lastRowToggled = React.useRef(null);\n  apiRef.current.registerControlState({\n    stateId: 'rowSelection',\n    propModel: propRowSelectionModel,\n    propOnChange: props.onRowSelectionModelChange,\n    stateSelector: gridRowSelectionStateSelector,\n    changeEvent: 'rowSelectionChange'\n  });\n  const {\n    checkboxSelection,\n    disableMultipleRowSelection,\n    disableRowSelectionOnClick,\n    pagination,\n    paginationMode,\n    isRowSelectable: propIsRowSelectable\n  } = props;\n  const canHaveMultipleSelection = !disableMultipleRowSelection || checkboxSelection;\n  const visibleRows = useGridVisibleRows(apiRef, props);\n  const expandMouseRowRangeSelection = React.useCallback(id => {\n    var _lastRowToggled$curre;\n    let endId = id;\n    const startId = (_lastRowToggled$curre = lastRowToggled.current) != null ? _lastRowToggled$curre : id;\n    const isSelected = apiRef.current.isRowSelected(id);\n    if (isSelected) {\n      const visibleRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n      const startIndex = visibleRowIds.findIndex(rowId => rowId === startId);\n      const endIndex = visibleRowIds.findIndex(rowId => rowId === endId);\n      if (startIndex === endIndex) {\n        return;\n      }\n      if (startIndex > endIndex) {\n        endId = visibleRowIds[endIndex + 1];\n      } else {\n        endId = visibleRowIds[endIndex - 1];\n      }\n    }\n    lastRowToggled.current = id;\n    apiRef.current.selectRowRange({\n      startId,\n      endId\n    }, !isSelected);\n  }, [apiRef]);\n\n  /**\n   * API METHODS\n   */\n  const setRowSelectionModel = React.useCallback(model => {\n    if (props.signature === GridSignature.DataGrid && !props.checkboxSelection && Array.isArray(model) && model.length > 1) {\n      throw new Error(['MUI: `rowSelectionModel` can only contain 1 item in DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock multiple selection.'].join('\\n'));\n    }\n    const currentModel = gridRowSelectionStateSelector(apiRef.current.state);\n    if (currentModel !== model) {\n      logger.debug(`Setting selection model`);\n      apiRef.current.setState(state => _extends({}, state, {\n        rowSelection: props.rowSelection ? model : []\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger, props.rowSelection, props.signature, props.checkboxSelection]);\n  const isRowSelected = React.useCallback(id => gridRowSelectionStateSelector(apiRef.current.state).includes(id), [apiRef]);\n  const isRowSelectable = React.useCallback(id => {\n    if (propIsRowSelectable && !propIsRowSelectable(apiRef.current.getRowParams(id))) {\n      return false;\n    }\n    const rowNode = apiRef.current.getRowNode(id);\n    if ((rowNode == null ? void 0 : rowNode.type) === 'footer' || (rowNode == null ? void 0 : rowNode.type) === 'pinnedRow') {\n      return false;\n    }\n    return true;\n  }, [apiRef, propIsRowSelectable]);\n  const getSelectedRows = React.useCallback(() => selectedGridRowsSelector(apiRef), [apiRef]);\n  const selectRow = React.useCallback(function (id) {\n    let isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let resetSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (!apiRef.current.isRowSelectable(id)) {\n      return;\n    }\n    lastRowToggled.current = id;\n    if (resetSelection) {\n      logger.debug(`Setting selection for row ${id}`);\n      apiRef.current.setRowSelectionModel(isSelected ? [id] : []);\n    } else {\n      logger.debug(`Toggling selection for row ${id}`);\n      const selection = gridRowSelectionStateSelector(apiRef.current.state);\n      const newSelection = selection.filter(el => el !== id);\n      if (isSelected) {\n        newSelection.push(id);\n      }\n      const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n      if (isSelectionValid) {\n        apiRef.current.setRowSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRows = React.useCallback(function (ids) {\n    let isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let resetSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    logger.debug(`Setting selection for several rows`);\n    const selectableIds = ids.filter(id => apiRef.current.isRowSelectable(id));\n    let newSelection;\n    if (resetSelection) {\n      newSelection = isSelected ? selectableIds : [];\n    } else {\n      // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n      const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n      selectableIds.forEach(id => {\n        if (isSelected) {\n          selectionLookup[id] = id;\n        } else {\n          delete selectionLookup[id];\n        }\n      });\n      newSelection = Object.values(selectionLookup);\n    }\n    const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n    if (isSelectionValid) {\n      apiRef.current.setRowSelectionModel(newSelection);\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRowRange = React.useCallback(function (_ref) {\n    let {\n      startId,\n      endId\n    } = _ref;\n    let isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let resetSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {\n      return;\n    }\n    logger.debug(`Expanding selection from row ${startId} to row ${endId}`);\n\n    // Using rows from all pages allow to select a range across several pages\n    const allPagesRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n    const startIndex = allPagesRowIds.indexOf(startId);\n    const endIndex = allPagesRowIds.indexOf(endId);\n    const [start, end] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];\n    const rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);\n    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);\n  }, [apiRef, logger]);\n  const selectionPublicApi = {\n    selectRow,\n    setRowSelectionModel,\n    getSelectedRows,\n    isRowSelected,\n    isRowSelectable\n  };\n  const selectionPrivateApi = {\n    selectRows,\n    selectRowRange\n  };\n  useGridApiMethod(apiRef, selectionPublicApi, 'public');\n  useGridApiMethod(apiRef, selectionPrivateApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n\n  /**\n   * EVENTS\n   */\n  const removeOutdatedSelection = React.useCallback(() => {\n    if (props.keepNonExistentRowsSelected) {\n      return;\n    }\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    const rowsLookup = gridRowsLookupSelector(apiRef);\n\n    // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n    const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n    let hasChanged = false;\n    currentSelection.forEach(id => {\n      if (!rowsLookup[id]) {\n        delete selectionLookup[id];\n        hasChanged = true;\n      }\n    });\n    if (hasChanged) {\n      apiRef.current.setRowSelectionModel(Object.values(selectionLookup));\n    }\n  }, [apiRef, props.keepNonExistentRowsSelected]);\n  const handleSingleRowSelection = React.useCallback((id, event) => {\n    const hasCtrlKey = event.metaKey || event.ctrlKey;\n\n    // multiple selection is only allowed if:\n    // - it is a checkboxSelection\n    // - it is a keyboard selection\n    // - Ctrl is pressed\n\n    const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);\n    const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;\n    const isSelected = apiRef.current.isRowSelected(id);\n    if (resetSelection) {\n      apiRef.current.selectRow(id, !isMultipleSelectionDisabled ? !isSelected : true, true);\n    } else {\n      apiRef.current.selectRow(id, !isSelected, false);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);\n  const handleRowClick = React.useCallback((params, event) => {\n    var _closest;\n    if (disableRowSelectionOnClick) {\n      return;\n    }\n    const field = (_closest = event.target.closest(`.${gridClasses.cell}`)) == null ? void 0 : _closest.getAttribute('data-field');\n    if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // click on checkbox should not trigger row selection\n      return;\n    }\n    if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      // click to open the detail panel should not select the row\n      return;\n    }\n    if (field) {\n      const column = apiRef.current.getColumn(field);\n      if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n    const rowNode = apiRef.current.getRowNode(params.id);\n    if (rowNode.type === 'pinnedRow') {\n      return;\n    }\n    if (event.shiftKey && (canHaveMultipleSelection || checkboxSelection)) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      handleSingleRowSelection(params.id, event);\n    }\n  }, [disableRowSelectionOnClick, canHaveMultipleSelection, checkboxSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);\n  const preventSelectionOnShift = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.shiftKey) {\n      var _window$getSelection;\n      (_window$getSelection = window.getSelection()) == null ? void 0 : _window$getSelection.removeAllRanges();\n    }\n  }, [canHaveMultipleSelection]);\n  const handleRowSelectionCheckboxChange = React.useCallback((params, event) => {\n    if (event.nativeEvent.shiftKey) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      apiRef.current.selectRow(params.id, params.value);\n    }\n  }, [apiRef, expandMouseRowRangeSelection]);\n  const handleHeaderSelectionCheckboxChange = React.useCallback(params => {\n    const shouldLimitSelectionToCurrentPage = props.checkboxSelectionVisibleOnly && props.pagination;\n    const rowsToBeSelected = shouldLimitSelectionToCurrentPage ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridExpandedSortedRowIdsSelector(apiRef);\n    apiRef.current.selectRows(rowsToBeSelected, params.value);\n  }, [apiRef, props.checkboxSelectionVisibleOnly, props.pagination]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Get the most recent cell mode because it may have been changed by another listener\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {\n      return;\n    }\n\n    // Ignore portal\n    // Do not apply shortcuts if the focus is not on the cell root component\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    if (isNavigationKey(event.key) && event.shiftKey) {\n      // The cell that has focus after the keyboard navigation\n      const focusCell = gridFocusCellSelector(apiRef);\n      if (focusCell && focusCell.id !== params.id) {\n        event.preventDefault();\n        const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);\n        if (!canHaveMultipleSelection) {\n          apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);\n          return;\n        }\n        const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);\n        const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n        let start;\n        let end;\n        if (newRowIndex > previousRowIndex) {\n          if (isNextRowSelected) {\n            // We are navigating to the bottom of the page and adding selected rows\n            start = previousRowIndex;\n            end = newRowIndex - 1;\n          } else {\n            // We are navigating to the bottom of the page and removing selected rows\n            start = previousRowIndex;\n            end = newRowIndex;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (isNextRowSelected) {\n            // We are navigating to the top of the page and removing selected rows\n            start = newRowIndex + 1;\n            end = previousRowIndex;\n          } else {\n            // We are navigating to the top of the page and adding selected rows\n            start = newRowIndex;\n            end = previousRowIndex;\n          }\n        }\n        const rowsBetweenStartAndEnd = visibleRows.rows.slice(start, end + 1).map(row => row.id);\n        apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);\n        return;\n      }\n    }\n    if (event.key === ' ' && event.shiftKey) {\n      event.preventDefault();\n      handleSingleRowSelection(params.id, event);\n      return;\n    }\n    if (event.key === 'a' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      selectRows(apiRef.current.getAllRowIds(), true);\n    }\n  }, [apiRef, handleSingleRowSelection, selectRows, visibleRows.rows, canHaveMultipleSelection]);\n  useGridApiEventHandler(apiRef, 'sortedRowsSet', runIfRowSelectionIsEnabled(removeOutdatedSelection));\n  useGridApiEventHandler(apiRef, 'rowClick', runIfRowSelectionIsEnabled(handleRowClick));\n  useGridApiEventHandler(apiRef, 'rowSelectionCheckboxChange', runIfRowSelectionIsEnabled(handleRowSelectionCheckboxChange));\n  useGridApiEventHandler(apiRef, 'headerSelectionCheckboxChange', handleHeaderSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', runIfRowSelectionIsEnabled(preventSelectionOnShift));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfRowSelectionIsEnabled(handleCellKeyDown));\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    if (propRowSelectionModel !== undefined) {\n      apiRef.current.setRowSelectionModel(propRowSelectionModel);\n    }\n  }, [apiRef, propRowSelectionModel, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection) {\n      apiRef.current.setRowSelectionModel([]);\n    }\n  }, [apiRef, props.rowSelection]);\n  const isStateControlled = propRowSelectionModel != null;\n  React.useEffect(() => {\n    if (isStateControlled || !props.rowSelection) {\n      return;\n    }\n\n    // props.isRowSelectable changed\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    if (isRowSelectable) {\n      const newSelection = currentSelection.filter(id => isRowSelectable(id));\n      if (newSelection.length < currentSelection.length) {\n        apiRef.current.setRowSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, isRowSelectable, isStateControlled, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection) {\n      return;\n    }\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    if (!canHaveMultipleSelection && currentSelection.length > 1) {\n      const {\n        rows: currentPageRows\n      } = getVisibleRows(apiRef, {\n        pagination,\n        paginationMode\n      });\n      const currentPageRowsLookup = currentPageRows.reduce((acc, _ref2) => {\n        let {\n          id\n        } = _ref2;\n        acc[id] = true;\n        return acc;\n      }, {});\n      const firstSelectableRow = currentSelection.find(id => {\n        let isSelectable = true;\n        if (isRowSelectable) {\n          isSelectable = isRowSelectable(id);\n        }\n        return isSelectable && currentPageRowsLookup[id]; // Check if the row is in the current page\n      });\n\n      apiRef.current.setRowSelectionModel(firstSelectableRow !== undefined ? [firstSelectableRow] : []);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection, disableMultipleRowSelection, isRowSelectable, pagination, paginationMode, props.rowSelection]);\n};","map":{"version":3,"names":["_extends","React","GridSignature","useGridApiEventHandler","useGridApiMethod","useGridLogger","gridRowsLookupSelector","gridRowSelectionStateSelector","selectedGridRowsSelector","selectedIdsLookupSelector","gridPaginatedVisibleSortedGridRowIdsSelector","gridFocusCellSelector","gridExpandedSortedRowIdsSelector","GRID_CHECKBOX_SELECTION_COL_DEF","GRID_ACTIONS_COLUMN_TYPE","GridCellModes","isKeyboardEvent","isNavigationKey","getVisibleRows","useGridVisibleRows","GRID_DETAIL_PANEL_TOGGLE_FIELD","gridClasses","getSelectionModelPropValue","selectionModelProp","prevSelectionModel","Array","isArray","rowSelectionStateInitializer","state","props","_getSelectionModelPro","rowSelection","rowSelectionModel","useGridRowSelection","apiRef","logger","runIfRowSelectionIsEnabled","callback","arguments","propRowSelectionModel","useMemo","current","lastRowToggled","useRef","registerControlState","stateId","propModel","propOnChange","onRowSelectionModelChange","stateSelector","changeEvent","checkboxSelection","disableMultipleRowSelection","disableRowSelectionOnClick","pagination","paginationMode","isRowSelectable","propIsRowSelectable","canHaveMultipleSelection","visibleRows","expandMouseRowRangeSelection","useCallback","id","_lastRowToggled$curre","endId","startId","isSelected","isRowSelected","visibleRowIds","startIndex","findIndex","rowId","endIndex","selectRowRange","setRowSelectionModel","model","signature","DataGrid","length","Error","join","currentModel","debug","setState","forceUpdate","includes","getRowParams","rowNode","getRowNode","type","getSelectedRows","selectRow","undefined","resetSelection","selection","newSelection","filter","el","push","isSelectionValid","selectRows","ids","selectableIds","selectionLookup","forEach","Object","values","_ref","getRow","allPagesRowIds","indexOf","start","end","rowsBetweenStartAndEnd","slice","selectionPublicApi","selectionPrivateApi","removeOutdatedSelection","keepNonExistentRowsSelected","currentSelection","rowsLookup","hasChanged","handleSingleRowSelection","event","hasCtrlKey","metaKey","ctrlKey","isMultipleSelectionDisabled","handleRowClick","params","_closest","field","target","closest","cell","getAttribute","column","getColumn","shiftKey","preventSelectionOnShift","_window$getSelection","window","getSelection","removeAllRanges","handleRowSelectionCheckboxChange","nativeEvent","value","handleHeaderSelectionCheckboxChange","shouldLimitSelectionToCurrentPage","checkboxSelectionVisibleOnly","rowsToBeSelected","handleCellKeyDown","getCellMode","Edit","currentTarget","contains","key","focusCell","preventDefault","isNextRowSelected","newRowIndex","getRowIndexRelativeToVisibleRows","previousRowIndex","rows","map","row","getAllRowIds","useEffect","isStateControlled","currentPageRows","currentPageRowsLookup","reduce","acc","_ref2","firstSelectableRow","find","isSelectable"],"sources":["/Users/oscar.garzon/Documents/breakable_toy_chidisimo/front-end/node_modules/@mui/x-data-grid/hooks/features/rowSelection/useGridRowSelection.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridSignature, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridRowsLookupSelector } from '../rows/gridRowsSelector';\nimport { gridRowSelectionStateSelector, selectedGridRowsSelector, selectedIdsLookupSelector } from './gridRowSelectionSelector';\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from '../pagination';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridExpandedSortedRowIdsSelector } from '../filter/gridFilterSelector';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_ACTIONS_COLUMN_TYPE } from '../../../colDef';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isKeyboardEvent, isNavigationKey } from '../../../utils/keyboardUtils';\nimport { getVisibleRows, useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\nimport { gridClasses } from '../../../constants/gridClasses';\nconst getSelectionModelPropValue = (selectionModelProp, prevSelectionModel) => {\n  if (selectionModelProp == null) {\n    return selectionModelProp;\n  }\n  if (Array.isArray(selectionModelProp)) {\n    return selectionModelProp;\n  }\n  if (prevSelectionModel && prevSelectionModel[0] === selectionModelProp) {\n    return prevSelectionModel;\n  }\n  return [selectionModelProp];\n};\nexport const rowSelectionStateInitializer = (state, props) => {\n  var _getSelectionModelPro;\n  return _extends({}, state, {\n    rowSelection: props.rowSelection ? (_getSelectionModelPro = getSelectionModelPropValue(props.rowSelectionModel)) != null ? _getSelectionModelPro : [] : []\n  });\n};\n\n/**\n * @requires useGridRows (state, method) - can be after\n * @requires useGridParamsApi (method) - can be after\n * @requires useGridFocus (state) - can be after\n * @requires useGridKeyboardNavigation (`cellKeyDown` event must first be consumed by it)\n */\nexport const useGridRowSelection = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridSelection');\n  const runIfRowSelectionIsEnabled = callback => (...args) => {\n    if (props.rowSelection) {\n      callback(...args);\n    }\n  };\n  const propRowSelectionModel = React.useMemo(() => {\n    return getSelectionModelPropValue(props.rowSelectionModel, gridRowSelectionStateSelector(apiRef.current.state));\n  }, [apiRef, props.rowSelectionModel]);\n  const lastRowToggled = React.useRef(null);\n  apiRef.current.registerControlState({\n    stateId: 'rowSelection',\n    propModel: propRowSelectionModel,\n    propOnChange: props.onRowSelectionModelChange,\n    stateSelector: gridRowSelectionStateSelector,\n    changeEvent: 'rowSelectionChange'\n  });\n  const {\n    checkboxSelection,\n    disableMultipleRowSelection,\n    disableRowSelectionOnClick,\n    pagination,\n    paginationMode,\n    isRowSelectable: propIsRowSelectable\n  } = props;\n  const canHaveMultipleSelection = !disableMultipleRowSelection || checkboxSelection;\n  const visibleRows = useGridVisibleRows(apiRef, props);\n  const expandMouseRowRangeSelection = React.useCallback(id => {\n    var _lastRowToggled$curre;\n    let endId = id;\n    const startId = (_lastRowToggled$curre = lastRowToggled.current) != null ? _lastRowToggled$curre : id;\n    const isSelected = apiRef.current.isRowSelected(id);\n    if (isSelected) {\n      const visibleRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n      const startIndex = visibleRowIds.findIndex(rowId => rowId === startId);\n      const endIndex = visibleRowIds.findIndex(rowId => rowId === endId);\n      if (startIndex === endIndex) {\n        return;\n      }\n      if (startIndex > endIndex) {\n        endId = visibleRowIds[endIndex + 1];\n      } else {\n        endId = visibleRowIds[endIndex - 1];\n      }\n    }\n    lastRowToggled.current = id;\n    apiRef.current.selectRowRange({\n      startId,\n      endId\n    }, !isSelected);\n  }, [apiRef]);\n\n  /**\n   * API METHODS\n   */\n  const setRowSelectionModel = React.useCallback(model => {\n    if (props.signature === GridSignature.DataGrid && !props.checkboxSelection && Array.isArray(model) && model.length > 1) {\n      throw new Error(['MUI: `rowSelectionModel` can only contain 1 item in DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock multiple selection.'].join('\\n'));\n    }\n    const currentModel = gridRowSelectionStateSelector(apiRef.current.state);\n    if (currentModel !== model) {\n      logger.debug(`Setting selection model`);\n      apiRef.current.setState(state => _extends({}, state, {\n        rowSelection: props.rowSelection ? model : []\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger, props.rowSelection, props.signature, props.checkboxSelection]);\n  const isRowSelected = React.useCallback(id => gridRowSelectionStateSelector(apiRef.current.state).includes(id), [apiRef]);\n  const isRowSelectable = React.useCallback(id => {\n    if (propIsRowSelectable && !propIsRowSelectable(apiRef.current.getRowParams(id))) {\n      return false;\n    }\n    const rowNode = apiRef.current.getRowNode(id);\n    if ((rowNode == null ? void 0 : rowNode.type) === 'footer' || (rowNode == null ? void 0 : rowNode.type) === 'pinnedRow') {\n      return false;\n    }\n    return true;\n  }, [apiRef, propIsRowSelectable]);\n  const getSelectedRows = React.useCallback(() => selectedGridRowsSelector(apiRef), [apiRef]);\n  const selectRow = React.useCallback((id, isSelected = true, resetSelection = false) => {\n    if (!apiRef.current.isRowSelectable(id)) {\n      return;\n    }\n    lastRowToggled.current = id;\n    if (resetSelection) {\n      logger.debug(`Setting selection for row ${id}`);\n      apiRef.current.setRowSelectionModel(isSelected ? [id] : []);\n    } else {\n      logger.debug(`Toggling selection for row ${id}`);\n      const selection = gridRowSelectionStateSelector(apiRef.current.state);\n      const newSelection = selection.filter(el => el !== id);\n      if (isSelected) {\n        newSelection.push(id);\n      }\n      const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n      if (isSelectionValid) {\n        apiRef.current.setRowSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRows = React.useCallback((ids, isSelected = true, resetSelection = false) => {\n    logger.debug(`Setting selection for several rows`);\n    const selectableIds = ids.filter(id => apiRef.current.isRowSelectable(id));\n    let newSelection;\n    if (resetSelection) {\n      newSelection = isSelected ? selectableIds : [];\n    } else {\n      // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n      const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n      selectableIds.forEach(id => {\n        if (isSelected) {\n          selectionLookup[id] = id;\n        } else {\n          delete selectionLookup[id];\n        }\n      });\n      newSelection = Object.values(selectionLookup);\n    }\n    const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n    if (isSelectionValid) {\n      apiRef.current.setRowSelectionModel(newSelection);\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRowRange = React.useCallback(({\n    startId,\n    endId\n  }, isSelected = true, resetSelection = false) => {\n    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {\n      return;\n    }\n    logger.debug(`Expanding selection from row ${startId} to row ${endId}`);\n\n    // Using rows from all pages allow to select a range across several pages\n    const allPagesRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n    const startIndex = allPagesRowIds.indexOf(startId);\n    const endIndex = allPagesRowIds.indexOf(endId);\n    const [start, end] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];\n    const rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);\n    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);\n  }, [apiRef, logger]);\n  const selectionPublicApi = {\n    selectRow,\n    setRowSelectionModel,\n    getSelectedRows,\n    isRowSelected,\n    isRowSelectable\n  };\n  const selectionPrivateApi = {\n    selectRows,\n    selectRowRange\n  };\n  useGridApiMethod(apiRef, selectionPublicApi, 'public');\n  useGridApiMethod(apiRef, selectionPrivateApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n\n  /**\n   * EVENTS\n   */\n  const removeOutdatedSelection = React.useCallback(() => {\n    if (props.keepNonExistentRowsSelected) {\n      return;\n    }\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    const rowsLookup = gridRowsLookupSelector(apiRef);\n\n    // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n    const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n    let hasChanged = false;\n    currentSelection.forEach(id => {\n      if (!rowsLookup[id]) {\n        delete selectionLookup[id];\n        hasChanged = true;\n      }\n    });\n    if (hasChanged) {\n      apiRef.current.setRowSelectionModel(Object.values(selectionLookup));\n    }\n  }, [apiRef, props.keepNonExistentRowsSelected]);\n  const handleSingleRowSelection = React.useCallback((id, event) => {\n    const hasCtrlKey = event.metaKey || event.ctrlKey;\n\n    // multiple selection is only allowed if:\n    // - it is a checkboxSelection\n    // - it is a keyboard selection\n    // - Ctrl is pressed\n\n    const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);\n    const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;\n    const isSelected = apiRef.current.isRowSelected(id);\n    if (resetSelection) {\n      apiRef.current.selectRow(id, !isMultipleSelectionDisabled ? !isSelected : true, true);\n    } else {\n      apiRef.current.selectRow(id, !isSelected, false);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);\n  const handleRowClick = React.useCallback((params, event) => {\n    var _closest;\n    if (disableRowSelectionOnClick) {\n      return;\n    }\n    const field = (_closest = event.target.closest(`.${gridClasses.cell}`)) == null ? void 0 : _closest.getAttribute('data-field');\n    if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // click on checkbox should not trigger row selection\n      return;\n    }\n    if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      // click to open the detail panel should not select the row\n      return;\n    }\n    if (field) {\n      const column = apiRef.current.getColumn(field);\n      if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n    const rowNode = apiRef.current.getRowNode(params.id);\n    if (rowNode.type === 'pinnedRow') {\n      return;\n    }\n    if (event.shiftKey && (canHaveMultipleSelection || checkboxSelection)) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      handleSingleRowSelection(params.id, event);\n    }\n  }, [disableRowSelectionOnClick, canHaveMultipleSelection, checkboxSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);\n  const preventSelectionOnShift = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.shiftKey) {\n      var _window$getSelection;\n      (_window$getSelection = window.getSelection()) == null ? void 0 : _window$getSelection.removeAllRanges();\n    }\n  }, [canHaveMultipleSelection]);\n  const handleRowSelectionCheckboxChange = React.useCallback((params, event) => {\n    if (event.nativeEvent.shiftKey) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      apiRef.current.selectRow(params.id, params.value);\n    }\n  }, [apiRef, expandMouseRowRangeSelection]);\n  const handleHeaderSelectionCheckboxChange = React.useCallback(params => {\n    const shouldLimitSelectionToCurrentPage = props.checkboxSelectionVisibleOnly && props.pagination;\n    const rowsToBeSelected = shouldLimitSelectionToCurrentPage ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridExpandedSortedRowIdsSelector(apiRef);\n    apiRef.current.selectRows(rowsToBeSelected, params.value);\n  }, [apiRef, props.checkboxSelectionVisibleOnly, props.pagination]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Get the most recent cell mode because it may have been changed by another listener\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {\n      return;\n    }\n\n    // Ignore portal\n    // Do not apply shortcuts if the focus is not on the cell root component\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    if (isNavigationKey(event.key) && event.shiftKey) {\n      // The cell that has focus after the keyboard navigation\n      const focusCell = gridFocusCellSelector(apiRef);\n      if (focusCell && focusCell.id !== params.id) {\n        event.preventDefault();\n        const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);\n        if (!canHaveMultipleSelection) {\n          apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);\n          return;\n        }\n        const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);\n        const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n        let start;\n        let end;\n        if (newRowIndex > previousRowIndex) {\n          if (isNextRowSelected) {\n            // We are navigating to the bottom of the page and adding selected rows\n            start = previousRowIndex;\n            end = newRowIndex - 1;\n          } else {\n            // We are navigating to the bottom of the page and removing selected rows\n            start = previousRowIndex;\n            end = newRowIndex;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (isNextRowSelected) {\n            // We are navigating to the top of the page and removing selected rows\n            start = newRowIndex + 1;\n            end = previousRowIndex;\n          } else {\n            // We are navigating to the top of the page and adding selected rows\n            start = newRowIndex;\n            end = previousRowIndex;\n          }\n        }\n        const rowsBetweenStartAndEnd = visibleRows.rows.slice(start, end + 1).map(row => row.id);\n        apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);\n        return;\n      }\n    }\n    if (event.key === ' ' && event.shiftKey) {\n      event.preventDefault();\n      handleSingleRowSelection(params.id, event);\n      return;\n    }\n    if (event.key === 'a' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      selectRows(apiRef.current.getAllRowIds(), true);\n    }\n  }, [apiRef, handleSingleRowSelection, selectRows, visibleRows.rows, canHaveMultipleSelection]);\n  useGridApiEventHandler(apiRef, 'sortedRowsSet', runIfRowSelectionIsEnabled(removeOutdatedSelection));\n  useGridApiEventHandler(apiRef, 'rowClick', runIfRowSelectionIsEnabled(handleRowClick));\n  useGridApiEventHandler(apiRef, 'rowSelectionCheckboxChange', runIfRowSelectionIsEnabled(handleRowSelectionCheckboxChange));\n  useGridApiEventHandler(apiRef, 'headerSelectionCheckboxChange', handleHeaderSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', runIfRowSelectionIsEnabled(preventSelectionOnShift));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfRowSelectionIsEnabled(handleCellKeyDown));\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    if (propRowSelectionModel !== undefined) {\n      apiRef.current.setRowSelectionModel(propRowSelectionModel);\n    }\n  }, [apiRef, propRowSelectionModel, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection) {\n      apiRef.current.setRowSelectionModel([]);\n    }\n  }, [apiRef, props.rowSelection]);\n  const isStateControlled = propRowSelectionModel != null;\n  React.useEffect(() => {\n    if (isStateControlled || !props.rowSelection) {\n      return;\n    }\n\n    // props.isRowSelectable changed\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    if (isRowSelectable) {\n      const newSelection = currentSelection.filter(id => isRowSelectable(id));\n      if (newSelection.length < currentSelection.length) {\n        apiRef.current.setRowSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, isRowSelectable, isStateControlled, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection) {\n      return;\n    }\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    if (!canHaveMultipleSelection && currentSelection.length > 1) {\n      const {\n        rows: currentPageRows\n      } = getVisibleRows(apiRef, {\n        pagination,\n        paginationMode\n      });\n      const currentPageRowsLookup = currentPageRows.reduce((acc, {\n        id\n      }) => {\n        acc[id] = true;\n        return acc;\n      }, {});\n      const firstSelectableRow = currentSelection.find(id => {\n        let isSelectable = true;\n        if (isRowSelectable) {\n          isSelectable = isRowSelectable(id);\n        }\n        return isSelectable && currentPageRowsLookup[id]; // Check if the row is in the current page\n      });\n\n      apiRef.current.setRowSelectionModel(firstSelectableRow !== undefined ? [firstSelectableRow] : []);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection, disableMultipleRowSelection, isRowSelectable, pagination, paginationMode, props.rowSelection]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}